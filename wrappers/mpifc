#!/bin/bash
#
# Jianshan Jiang modified it from mpifc.bat
#
# Copyright Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials,
# and your use of them is governed by the express license under which they
# were provided to you (License). Unless the License provides otherwise,
# you may not use, modify, copy, publish, distribute, disclose or transmit
# this software or the related documents without Intel's prior written
# permission.
#
# This software and the related documents are provided as is, with no
# express or implied warranties, other than those that are expressly stated
# in the License.

# ----------------------------------------------------------------------------
# mpifc
# Simple script to compile and/or link MPI programs.
# This script knows the default flags and libraries, and can handle
# alternative FORTRAN compilers and the associated flags and libraries.
#
# We assume that (a) the FORTRAN compiler can both compile and link programs
# We use MPI_xxx so that the user may continue to use CFLAGS, LIBS, etc
# to modify the behavior of the compiler and linker.
# ----------------------------------------------------------------------------

# MPIVERSION is the version of the Intel(R) MPI Library that mpicc is intended for
MPIVERSION=2021.13

nl='
'

# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent tools from complaining about whitespace usage.
IFS=" ""	$nl"

# func_file_conv build_file unneeded_conversions
# Convert a $build file to $host form and store it in $file
# Currently only supports Windows hosts. If the determined conversion
# type is listed in (the comma separated) UNNEEDED_CONVERSIONS, no
# conversion will take place.
func_file_conv ()
{
  cygpath -w "$1" | sed -E 's|^/([a-zA-Z])|\1:|; s|[\\/]|\\\\|g'
}

# func_cl_dashL linkdir
# Make cl look for libraries in LINKDIR
func_cl_dashL ()
{
  file=$(func_file_conv "$1")
  if test -z "$lib_path"; then
    lib_path=$file
  else
    lib_path="$lib_path;$file"
  fi
  linker_opts="$linker_opts -LIBPATH:$file"
}

# func_cl_dashl library
# Do a library search-path lookup for cl
func_cl_dashl ()
{
  lib=$1
  found=no
  save_IFS=$IFS
  IFS=';'
  for dir in $lib_path $LIB
	do
		IFS=$save_IFS
		if $shared && test -f "$dir/$lib.dll.lib"; then
			found=yes
      lib=$(func_file_conv "$dir/$lib.dll.lib")
			break
		fi
		if test -f "$dir/$lib.lib"; then
			found=yes
      lib=$(func_file_conv "$dir/$lib.lib")
			break
		fi
		if test -f "$dir/lib$lib.a"; then
			found=yes
      lib=$(func_file_conv "$dir/lib$lib.a")
			break
		fi
	done
  IFS=$save_IFS

  if test "$found" != yes; then
    lib=$lib.lib
  fi
}

if [ $# -eq 0 ] ; then
  echo "Error: Command line argument is needed!"
  "$0" -help
  exit 1
fi

case $1 in
  -help)
    # Print mini-help if started without parameters
    echo "Simple script to compile and/or link MPI programs."
    echo "This script knows the default flags and libraries, and can handle"
    echo "alternative Fortran compilers and the associated flags and libraries."
    echo "Usage: `basename $0` [options] <files>"
    echo "----------------------------------------------------------------------------"
    echo "The following options are supported:"
    echo "   -fc=<name>             to specify compiler name: i.e. -fc=ifort"
    echo "   -echo                  to print the scripts during its execution"
    echo "   -show                  to show command lines without real calling"
    echo "   -show_env              to show environment variables"
    echo "   -v                     to print version of the script"
    echo "   -ilp64                 to link ilp64 wrapper library"
    echo "   -no_ilp64              disable ilp64 support explicitly"
    echo "   -t or -trace"
    echo "                          to build with Intel(R) Trace Collector Library"
    echo "   -check_mpi             to build with the Intel(R) Trace Collector correctness"
    echo "                          checking library"
    echo "   -profile=<name>        to specify a profile configuration file in"
    echo "                          the I_MPI_COMPILER_CONFIG_DIR folder: i.e. -profile=myprofile.conf"
    echo "   -link_mpi=<name>"
    echo "                   link against the specified version of the Intel(R) MPI Library"
    echo "                   i.e -link_mpi=opt|dbg"
    echo "All other options will be passed to the compiler without changing."
    echo "----------------------------------------------------------------------------"
    echo "The following environment variables are used:"
    echo "   I_MPI_ROOT      Intel(R) MPI Library installation directory path"
    echo "   I_MPI_{FC,F77,F90} or MPICH_{FC,F77,F90}"
    echo "                   the path/name of the underlying compiler to be used."
    echo "   I_MPI_{FC,F77,F90}_PROFILE or MPI{FC,F77,F90}_PROFILE"
    echo "                   name of profile file (without extension)"
    echo "   I_MPI_COMPILER_CONFIG_DIR"
    echo "                   folder which contains configuration files *.conf"
    echo "   VT_ROOT         Intel(R) Trace Collector installation directory path"
    echo "----------------------------------------------------------------------------"
    exit 0
    ;;
  -v|-V|-verbose)
    # Pass this argument to the compiler as well.
    echo "$(basename $0) for the Intel(R) MPI Library $MPIVERSION for Windows*"
    echo "Copyright Intel Corporation."
    exit 0
    ;;
esac

# The I_MPI_ROOT should be defined by a installer
if [ -z "$I_MPI_ROOT" ]; then
  echo 'You have to source compiler.sh'
  exit 1
fi
I_MPI_INCDIR="${I_MPI_ROOT}/include"
I_MPI_LIBDIR="${I_MPI_ROOT}/lib"
I_MPI_CFGDIR="${I_MPI_ROOT}/etc"
if [ -d "${I_MPI_ROOT}/lib/mpi/debug" ]; then
  I_MPI_DBG_LIB_DIR='/lib/mpi/debug'
  I_MPI_RELEASE_LIB_DIR='/lib'
else
  I_MPI_DBG_LIB_DIR='/lib/debug'
  I_MPI_RELEASE_LIB_DIR='/lib/release'
fi
# The environment variables I_MPI_COMPILER_CONFIG_DIR may be used
# to override directory where *.conf files are placed.
if [ -n "$I_MPI_COMPILER_CONFIG_DIR" ]; then
  I_MPI_CFGDIR="$I_MPI_COMPILER_CONFIG_DIR"
fi

# The environment variables I_MPI_{FC,F77,F90} and MPICH_{FC,F77,F90} may
# be used to override the default choice (the FC has highest priority).
FC=ifort
if [ -n "$I_MPI_F77" ]; then
  FC=$I_MPI_F77
elif [ -n "$MPICH_F77" ]; then
  FC=$MPICH_F77
fi
if [ -n "$I_MPI_F90" ]; then
  FC=$I_MPI_F90
elif [ -n "$MPICH_F90" ]; then
  FC=$MPICH_F90
fi
if [ -n "$I_MPI_FC" ]; then
  FC=$I_MPI_FC
elif [ -n "$MPICH_FC" ]; then
  FC=$MPICH_FC
fi

# The environment variables I_MPI_{FC,F77,F90}_PROFILE and MPI{FC,F77,F90}_RPOFILE
# may be used to select profile file.
profConf=
if [ -n "$I_MPI_F77_PROFILE" ]; then
  profConf=$I_MPI_F77_PROFILE
elif [ -n "$MPIF77_PROFILE" ]; then
  profConf=$MPIF77_PROFILE
fi
if [ -n "$I_MPI_F90_PROFILE" ]; then
  profConf=$I_MPI_F90_PROFILE
elif [ -n "$MPIF90_PROFILE" ]; then
  profConf=$MPIF90_PROFILE
fi
if [ -n "$I_MPI_FC_PROFILE" ]; then
  profConf=$I_MPI_FC_PROFILE
elif [ -n "$MPIFC_PROFILE" ]; then
  profConf=$MPIFC_PROFILE
fi

# Override default mpi library
mpilib_override=
if [ -n "$I_MPI_LINK" ]; then
  mpilib_override=$I_MPI_LINK
fi

# Default settings for compiler, flags, and libraries
# FCCPP=
# Fortran 90 Compiler characteristics
FCINC=-I
# f90modinc specifies how to add a directory to the search path for modules.
# Some compilers (Intel ifc version 5) do not support this concept, and
# instead need
# a specific list of files that contain module names and directories.
# The FCMODINCSPEC is a more general approach that uses <dir> and <file>
# for the directory and file respectively.
# FCMODINC=-I
# FCMODINCSPEC=
# FCEXT=f90
I_MPI_CFLAGS=
I_MPI_LDFLAGS=
I_MPI_LIBNAME=impi
I_MPI_TRACE_PATH=
VTTRACE_LIBS_START=
# NEEDSPLIB=no

# Internal variables
# Show is set to echo to cause the compilation command to be echoed instead
# of executed.
Show=eval
static_mpi=no
static_log=no
handle_executable=
ilp64=no
no_ilp64=
case_trace=no
trace_opt=no
PROFILE_INCPATHS=""
PROFILE_PRELIB=""
PROFILE_POSTLIB=""
LIB_PREFIX=
LINKER_OPTION='-link'

# ------------------------------------------------------------------------
# Argument processing.
# This is somewhat awkward because of the handling of arguments within
# the shell.  We want to handle arguments that include spaces without
# loosing the spacing (an alternative would be to use a more powerful
# scripting language that would allow us to retain the array of values,
# which the basic (rather than enhanced) Bourne shell does not.
#
# Look through the arguments for arguments that indicate compile only.
# If these are *not* found, add the library options

eat=
# Assume a capable shell
lib_path=
shared=:
linker_opts=
for arg
do
  if test -n "$eat"; then
    eat=
  else
    case $1 in
      -show_env)
        show_env=yes
        ;;
      # ----------------------------------------------------------------
      # Options that control how we use mpicc (e.g., -show, etc.)
      -echo)
        set -x
        ;;
      -fc=*)
        FC=`echo A$arg | sed -e 's/A-fc=//g'`
        if [ "$#" -eq "1" ] ; then
          echo "Error: extra arguments required"
          echo "usage: mpifc -fc=<name> -v"
          exit 1
        fi
        ;;
      -link_mpi=*)
        mpilib_override=`echo A$arg | sed -e 's/A-link_mpi=//g'`
        ;;
      -show)
        Show=echo
        ;;
      -shared)
        static_mpi=no
        ;;
        # ----------------------------------------------------------------
        # -compile_info included for backward compatibility
        -compile-info|-compile_info)
        Show=echo
        ;;
        # ----------------------------------------------------------------
        # -link_info included for backward compatibility
        -link-info|-link_info)
        Show=echo
        ;;
      -profile=*)
        # Pass the name of a profiling configuration.  As
        # a special case, <name>.lib or <name>.dll may be used
        # if the library is in $libdir
        # Loading the profConf file is handled below
        profConf=`echo A$arg | sed -e 's/A-profile=//g'`
        ;;
      -Z7|-Zi|-ZI)
        MPILIBDIR=$I_MPI_DBG_LIB_DIR
        ;;
      -debug|-debug:extended|-debug:semantic_stepping|-debug:full|-debug:partial|-debug:minimal)
        MPILIBDIR=$I_MPI_DBG_LIB_DIR
        ;;
      -debug:none)
        ;;
      -mt_mpi)
        ;;
      -ilp64)
        ilp64=yes
        ;;
      -i8)
        if [ -z "$no_ilp64" ]; then
          ilp64=yes
        fi
        set x "$@" "$1"
        ;;
      -4I8)
        if [ -z "$no_ilp64" ]; then
          ilp64=yes
        fi
        set x "$@" "$1"
        ;;
      -integer_size:64)
        if [ -z "$no_ilp64" ]; then
          ilp64=yes
        fi
        set x "$@" "$1"
        ;;
      -no_ilp64)
        no_ilp64=yes
        ilp64=no
        ;;
      -t | -trace)
        if [ -z "$VT_ROOT" ]; then
          echo "You need to set VT_ROOT env variable to use -trace option"
          exit 3
        fi
        if [ -z "$VT_LIB_DIR" ]; then
          if [ -z "$VT_SLIB_DIR" ]; then
            echo "You have to source <ITAC>/bin/itacvars.bat <mpi> to use -trace option"
            exit 3
          fi
        fi
        I_MPI_TRACE_LIB=VT.lib
        I_MPI_TRACE_EXTRA_LIB=$VT_ADD_LIBS
        I_MPI_CFLAGS="$I_MPI_CFLAGS -I\"${VT_ROOT}/include\""
        trace_opt=yes
        case_trace=no
        if [ "$2" == "log" ]; then
          MPILIBDIR='/log'
          eat=1
        fi
        ;;
      -check_mpi)
        if [ -z "$VT_ROOT" ]; then
          echo "You need to set VT_ROOT env variable to use -check_mpi option"
          exit 3
        fi
        if [ -z "$VT_LIB_DIR" ]; then
          if [ -z "$VT_SLIB_DIR" ]; then
            echo "You have to source <ITAC>/bin/itacvars.bat <mpi> to use -check_mpi option"
            exit 3
          fi
        fi
        I_MPI_TRACE_LIB=VTmc.lib
        I_MPI_TRACE_EXTRA_LIB=$VT_ADD_LIBS
        I_MPI_CFLAGS="$I_MPI_CFLAGS -I\"${VT_ROOT}/include\""
        trace_opt=yes
        ;;
      -Fe | -o)
        # configure might choose to run compile as 'compile cc -o foo foo.c'.
        eat=1
        case $2 in
          *.o | *.lo | *.[oO][bB][jJ])
            file=$(func_file_conv "$2")
            set x "$@" -Fo"$file"
            shift
            ;;
          *.dll)
            file=$(func_file_conv "$2")
            set x "$@" -LD -Fe"$file"
            shift
            ;;
          *)
            file=$(func_file_conv "$2")
            set x "$@" -Fe"$file"
            shift
            ;;
        esac
        ;;
      -I*)
        file=$(func_file_conv "${1#-I}")
        set x "$@" -I"$file"
        shift
        ;;
      -l*)
        func_cl_dashl "${1#-l}"
        set x "$@" "$lib"
        shift
        ;;
      -L*)
        func_cl_dashL "${1#-L}"
        ;;
      --out-implib)
        eat=1
        file=$(func_file_conv "$2")
        linker_opts="$linker_opts -implib:$file"
        ;;
      --out-implib=*)
        implib=${1#--out-implib=}
        file=$(func_file_conv "$implib")
        linker_opts="$linker_opts -implib:$file"
        ;;
      --output-def)
        eat=1
        file=$(func_file_conv "$2")
        if test -f "$file"; then
          linker_opts="$linker_opts -def:$file"
        fi
        ;;
      --output-def=*)
        def=${1#--output-def=}
        if test -f "$def"; then
          file=$(func_file_conv "$def")
          linker_opts="$linker_opts -def:$file"
        fi
        ;;
      -static)
        # static_mpi=yes
        shared=false
        ;;
      -Wl,*)
        implib_option=
        def_option=
        dll_option=
        arg=${1#-Wl,}
        save_ifs="$IFS"; IFS=','
        for flag in $arg; do
          IFS="$save_ifs"
          case $flag in
            --whole-archive)
              linker_opts="$linker_opts -wholearchive"
              ;;
            --out-implib)
              implib_option=1
              ;;
            --out-implib=*)
              implib=${flag#--out-implib=}
              file=$(func_file_conv "$implib")
              linker_opts="$linker_opts -implib:$file"
              ;;
            --output-def)
              def_option=1
              ;;
            --output-def=*)
              # FIXME:
              # msvc don't support to generate .def from linker, but use this option
              # for those library hasn't use libtool to generate .def/.exp
              def=${flag#--output-def=}
              if test -f "$def"; then
                file=$(func_file_conv "$def")
                linker_opts="$linker_opts -def:$file"
              fi
              ;;
            -DLL)
              dll_option=1
              ;;
            -IMPLIB:*)
              if test -n "$dll_option"; then
                implib=${flag#-IMPLIB:}
                file=$(func_file_conv "$implib")
                linker_opts="$linker_opts -implib:$file"
              fi
              ;;
            *)
              if test -n "$def_option"; then
                if test -f "$flag"; then
                  file=$(func_file_conv "$flag")
                  linker_opts="$linker_opts -def:$file"
                fi
              elif test -n "$implib_option"; then
                file=$(func_file_conv "$flag")
                linker_opts="$linker_opts -implib:$file"
              else
                linker_opts="$linker_opts $flag"
              fi
              ;;
          esac
        done
        IFS="$save_ifs"
        ;;
      -Xlinker)
        eat=1
        linker_opts="$linker_opts $2"
        ;;
      -*)
        set x "$@" "$1"
        shift
        ;;
      *.f | *.f90 | *.fpp | *.FPP | *.lib | *.LIB | *.Lib | *.OBJ | *.obj | *.[oO])
        file=$(func_file_conv "$1")
        set x "$@" "$file"
        shift
        ;;
      *)
        set x "$@" "$1"
        shift
        ;;
    esac
  fi
  shift
done

# Override mpi library in regards to -link_mpi
if [ "$mpilib_override" == "opt" ]; then
  MPILIBDIR="$I_MPI_RELEASE_LIB_DIR"
  I_MPI_LIBNAME=impi
elif [ "$mpilib_override" == "dbg" ]; then
  MPILIBDIR=$I_MPI_DBG_LIB_DIR
  I_MPI_LIBNAME=impi
elif [ -n "$mpilib_override" ]; then
  echo "Warning: incorrect library version specified. Automatically selected library will be used"
fi

if [ -z "$MPILIBDIR" ]; then
  MPILIBDIR=$I_MPI_RELEASE_LIB_DIR
fi

# If there is a file $I_MPI_CFGDIR/mpif90-$FCname.conf,
# where FCname is the name of the compiler with all spaces replaced by hyphens
# (e.g., "f90 -64" becomes "f90--64", that file is sources, allowing other
# changes to the compilation environment.  See the variables used by the
# script (defined above)
FCname=$FC
# echo FCname=$FCname
if [ -f "${I_MPI_CFGDIR}/mpifc-$FCname.conf" ]; then
    . "${I_MPI_CFGDIR}/mpifc-$FCname.conf"
fi

if [ "$trace_opt" == "yes" ]; then
  if [ -z "$I_MPI_TRACE_PATH" ]; then
    if [ "$static_log" == "yes" ]; then
      I_MPI_TRACE_PATH="$VT_LIB_DIR"
    else
      I_MPI_TRACE_PATH="$VT_SLIB_DIR"
    fi
  fi
  VTTRACE_LIBS_START="$I_MPI_TRACE_PATH $I_MPI_TRACE_LIB $I_MPI_TRACE_EXTRA_LIB"
fi

# Derived variables.  These are assembled from variables set from the
# default, environment, configuration file (if any) and command-line
# options (if any)

mpilibs="${LIB_PREFIX}${I_MPI_LIBNAME}.lib"

# if [ "$NEEDSPLIB" == "yes" ]; then
#     mpilibs="${PI_MPI_LIBNAME}.lib $mpilibs"
# fi

# Handle the case of a profile switch
if [ -n "$profConf" ]; then
  if [ -f "${I_MPI_LIBDIR}/${profConf}.lib" ]; then
    profConfLibExists=yes
  fi
  if [ -f "${I_MPI_CFGDIR}/${profConf}.conf" ]; then
    profConfFileExists=yes
  fi
fi
if [ "$profConfLibExists" == "yes" ]; then
  mpilibs="${I_MPI_LIBDIR}/${profConf}.lib $mpilibs"
elif [ -n "$profConf" ]; then
  if [ "$profConfFileExists" == "yes" ]; then
    . "${I_MPI_CFGDIR}/${profConf}.conf"
  else
    echo "The configuration file ${I_MPI_CFGDIR}/${profConf}.conf is not found!"
  fi
fi

if [ "$ilp64" == "yes" ]; then
  FCINCDIRS="${FCINC}\'${I_MPI_INCDIR}/mpi/ilp64\' ${FCINC}\'${I_MPI_INCDIR}\' ${FCINC}\'${I_MPI_INCDIR}/mpi\'"
  mpilibs="libmpi_ilp64.lib $mpilibs"
else
  FCINCDIRS="${FCINC}\'${I_MPI_INCDIR}\' ${FCINC}\'${I_MPI_INCDIR}/mpi\'"
fi

if [ -n "$PROFILE_INCPATHS" ]; then I_MPI_CFLAGS="$PROFILE_INCPATHS $I_MPI_CFLAGS"; fi
if [ -n "$PROFILE_PRELIB" ]; then mpilibs="$PROFILE_PRELIB $mpilibs"; fi
if [ -n "$PROFILE_POSTLIB" ]; then mpilibs="$mpilibs $PROFILE_POSTLIB"; fi

# A temporary statement to invoke the compiler
# Place the -L before any args incase there are any mpi libraries in there.
# Eventually, we'll want to move this after any non-MPI implementation
# libraries.

if [ "$show_env" == "yes" ]; then
  env | more
  exit 0
fi

if test -n "$linker_opts"; then
  if [ -z "$I_MPI_TRACE_PATH" ]; then
    linker_opts="$I_MPI_LDFLAGS ${LINKER_OPTION}$linker_opts -LIBPATH:\'${I_MPI_ROOT}${MPILIBDIR}\' -LIBPATH:\'${I_MPI_LIBDIR}\' $mpilibs"
  else
    linker_opts="$I_MPI_LDFLAGS ${LINKER_OPTION}$linker_opts -LIBPATH:\'${I_MPI_TRACE_PATH}\' -LIBPATH:\'${I_MPI_ROOT}${MPILIBDIR}\' -LIBPATH:\'${I_MPI_LIBDIR}\' $VTTRACE_LIBS_START $mpilibs"
  fi
fi
$Show $FC $I_MPI_CFLAGS $FCMODDIRS $FCINCDIRS "$@" $linker_opts

rc=$?
if [ $rc -eq 1 ]; then
  echo ERROR in the compiling/linking [$rc]
  exit 3
fi
