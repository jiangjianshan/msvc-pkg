diff -urN ncurses-6.5-orig/include/win32_curses.h ncurses-6.5/include/win32_curses.h
--- ncurses-6.5-orig/include/win32_curses.h	2021-06-18 05:26:02.000000000 +0800
+++ ncurses-6.5/include/win32_curses.h	2024-11-26 15:53:17.535982000 +0800
@@ -68,8 +68,10 @@
 #undef sleep
 #define sleep(n) Sleep((n) * 1000)
 
+#if !HAVE_CLOCK_GETTIME && !HAVE_GETTIMEOFDAY
 #undef gettimeofday
 #define gettimeofday(tv,tz) _nc_gettimeofday(tv,tz)
+#endif
 
 #endif /* _NC_WIN32_CURSES_H */
 #endif /* _WIN32||_WIN64 */
diff -urN ncurses-6.5-orig/ncurses/base/tdelete.c ncurses-6.5/ncurses/base/tdelete.c
--- ncurses-6.5-orig/ncurses/base/tdelete.c	1970-01-01 08:00:00.000000000 +0800
+++ ncurses-6.5/ncurses/base/tdelete.c	2024-11-26 15:53:17.535982000 +0800
@@ -0,0 +1,64 @@
+/*	$NetBSD: tdelete.c,v 1.3 1999/09/20 04:39:43 lukem Exp $	*/
+
+/*
+ * Tree search generalized from Knuth (6.2.2) Algorithm T just like
+ * the AT&T man page says.
+ *
+ * The node_t structure is for internal use only, lint doesn't grok it.
+ *
+ * Written by reading the System V Interface Definition, not the code.
+ *
+ * Totally public domain.
+ */
+
+#include <assert.h>
+#define _SEARCH_PRIVATE
+#include "search.priv.h"
+#include <stdlib.h>
+
+#define _DIAGASSERT assert
+
+
+
+/* delete node with given key */
+void *
+tdelete(const void *vkey,	/* key to be deleted */
+	void      **vrootp,	/* address of the root of tree */
+	int       (*compar)(const void *, const void *))
+{
+	node_t **rootp = (node_t **)vrootp;
+	node_t *p, *q, *r;
+	int  cmp;
+
+	_DIAGASSERT((uintptr_t)compar != (uintptr_t)NULL);
+
+	if (rootp == NULL || (p = *rootp) == NULL)
+		return NULL;
+
+	while ((cmp = (*compar)(vkey, (*rootp)->key)) != 0) {
+		p = *rootp;
+		rootp = (cmp < 0) ?
+		    &(*rootp)->llink :		/* follow llink branch */
+		    &(*rootp)->rlink;		/* follow rlink branch */
+		if (*rootp == NULL)
+			return NULL;		/* key not found */
+	}
+	r = (*rootp)->rlink;			/* D1: */
+	if ((q = (*rootp)->llink) == NULL)	/* Left NULL? */
+		q = r;
+	else if (r != NULL) {			/* Right link is NULL? */
+		if (r->llink == NULL) {		/* D2: Find successor */
+			r->llink = q;
+			q = r;
+		} else {			/* D3: Find NULL link */
+			for (q = r->llink; q->llink != NULL; q = r->llink)
+				r = q;
+			r->llink = q->rlink;
+			q->llink = (*rootp)->llink;
+			q->rlink = (*rootp)->rlink;
+		}
+	}
+	free(*rootp);				/* D4: Free node */
+	*rootp = q;				/* link parent to new node */
+	return p;
+}
diff -urN ncurses-6.5-orig/ncurses/base/tdestroy.c ncurses-6.5/ncurses/base/tdestroy.c
--- ncurses-6.5-orig/ncurses/base/tdestroy.c	1970-01-01 08:00:00.000000000 +0800
+++ ncurses-6.5/ncurses/base/tdestroy.c	2024-11-26 15:53:17.535982000 +0800
@@ -0,0 +1,25 @@
+/**
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER.PD within this package.
+ */
+
+#include <assert.h>
+#define _SEARCH_PRIVATE
+#define _GNU_SOURCE
+#include <stdlib.h>
+#include "search.priv.h"
+
+
+/* destroy tree recursively and call free_node on each node key */
+void tdestroy(void *root, void (*free_node)(void *))
+{
+  node_t *p = (node_t *)root;
+  if (!p)
+    return;
+
+  tdestroy(p->llink , free_node);
+  tdestroy(p->rlink, free_node);
+  free_node((void*)p->key);
+  free(p);
+}
diff -urN ncurses-6.5-orig/ncurses/base/tfind.c ncurses-6.5/ncurses/base/tfind.c
--- ncurses-6.5-orig/ncurses/base/tfind.c	1970-01-01 08:00:00.000000000 +0800
+++ ncurses-6.5/ncurses/base/tfind.c	2024-11-26 15:53:17.535982000 +0800
@@ -0,0 +1,42 @@
+/*	$NetBSD: tfind.c,v 1.3.18.2 2005/03/23 11:12:21 tron Exp $	*/
+
+/*
+ * Tree search generalized from Knuth (6.2.2) Algorithm T just like
+ * the AT&T man page says.
+ *
+ * The node_t structure is for internal use only, lint doesn't grok it.
+ *
+ * Written by reading the System V Interface Definition, not the code.
+ *
+ * Totally public domain.
+ */
+
+#include <assert.h>
+#define _SEARCH_PRIVATE
+#include <stdlib.h>
+#include "search.priv.h"
+
+
+/* find a node, or return 0 */
+void *
+tfind (const void *vkey, void * const *vrootp,
+       int (*compar) (const void *, const void *))
+{
+  node_t * const *rootp = (node_t * const*)vrootp;
+
+  if (rootp == NULL)
+    return NULL;
+
+  while (*rootp != NULL)
+    {
+      /* T1: */
+      int r;
+
+      if ((r = (*compar)(vkey, (*rootp)->key)) == 0)	/* T2: */
+	return *rootp;		/* key found */
+      rootp = (r < 0) ?
+	  &(*rootp)->llink :		/* T3: follow left branch */
+	  &(*rootp)->rlink;		/* T4: follow right branch */
+    }
+  return NULL;
+}
diff -urN ncurses-6.5-orig/ncurses/base/tsearch.c ncurses-6.5/ncurses/base/tsearch.c
--- ncurses-6.5-orig/ncurses/base/tsearch.c	1970-01-01 08:00:00.000000000 +0800
+++ ncurses-6.5/ncurses/base/tsearch.c	2024-11-26 15:53:17.551633000 +0800
@@ -0,0 +1,58 @@
+/*	$NetBSD: tsearch.c,v 1.4 1999/09/20 04:39:43 lukem Exp $	*/
+
+/*
+ * Tree search generalized from Knuth (6.2.2) Algorithm T just like
+ * the AT&T man page says.
+ *
+ * The node_t structure is for internal use only, lint doesn't grok it.
+ *
+ * Written by reading the System V Interface Definition, not the code.
+ *
+ * Totally public domain.
+ */
+
+#include <assert.h>
+#define _SEARCH_PRIVATE
+#include "search.priv.h"
+#include <stdlib.h>
+
+
+/* find or insert datum into search tree */
+void *
+tsearch (const void * __restrict vkey,		/* key to be located */
+	 void ** __restrict vrootp,		/* address of tree root */
+	 int (*compar) (const void *, const void *))
+{
+  node_t *q, **n;
+  node_t **rootp = (node_t **)vrootp;
+
+  if (rootp == NULL)
+    return NULL;
+
+  n = rootp;
+  while (*n != NULL)
+    {
+      /* Knuth's T1: */
+      int r;
+
+      if ((r = (*compar)(vkey, ((*n)->key))) == 0)	/* T2: */
+	return *n;		/* we found it! */
+
+      n = (r < 0) ?
+	  &(*rootp)->llink :		/* T3: follow left branch */
+	  &(*rootp)->rlink;		/* T4: follow right branch */
+      if (*n == NULL)
+        break;
+      rootp = n;
+    }
+
+  q = malloc(sizeof(node_t));		/* T5: key not found */
+  if (!q)
+    return q;
+  *n = q;
+  /* make new node */
+  /* LINTED const castaway ok */
+  q->key = (void *)vkey;		/* initialize new node */
+  q->llink = q->rlink = NULL;
+  return q;
+}
diff -urN ncurses-6.5-orig/ncurses/base/twalk.c ncurses-6.5/ncurses/base/twalk.c
--- ncurses-6.5-orig/ncurses/base/twalk.c	1970-01-01 08:00:00.000000000 +0800
+++ ncurses-6.5/ncurses/base/twalk.c	2024-11-26 15:53:17.551633000 +0800
@@ -0,0 +1,49 @@
+/*	$NetBSD: twalk.c,v 1.2 1999/09/16 11:45:37 lukem Exp $	*/
+
+/*
+ * Tree search generalized from Knuth (6.2.2) Algorithm T just like
+ * the AT&T man page says.
+ *
+ * The node_t structure is for internal use only, lint doesn't grok it.
+ *
+ * Written by reading the System V Interface Definition, not the code.
+ *
+ * Totally public domain.
+ */
+
+#include <assert.h>
+#define _SEARCH_PRIVATE
+#include "search.priv.h"
+#include <stdlib.h>
+
+static void trecurse (const node_t *, void (*action)(const void *, VISIT, int),
+	              int level);
+				  
+/* Walk the nodes of a tree */
+static void
+trecurse (const node_t *root,	/* Root of the tree to be walked */
+	  void (*action)(const void *, VISIT, int),
+	  int level)
+{
+  if (root->llink == NULL && root->rlink == NULL)
+    (*action)(root, leaf, level);
+  else
+    {
+      (*action)(root, preorder, level);
+      if (root->llink != NULL)
+        trecurse (root->llink, action, level + 1);
+      (*action)(root, postorder, level);
+      if (root->rlink != NULL)
+	      trecurse(root->rlink, action, level + 1);
+      (*action)(root, endorder, level);
+    }
+}
+
+/* Walk the nodes of a tree */
+void
+twalk (const void *vroot,	/* Root of the tree to be walked */
+       void (*action) (const void *, VISIT, int))
+{
+  if (vroot != NULL && action != NULL)
+    trecurse(vroot, action, 0);
+}
diff -urN ncurses-6.5-orig/ncurses/modules ncurses-6.5/ncurses/modules
--- ncurses-6.5-orig/ncurses/modules	2020-09-13 01:58:12.000000000 +0800
+++ ncurses-6.5/ncurses/modules	2024-11-26 15:53:17.551633000 +0800
@@ -156,6 +156,12 @@
 use_screen	lib		$(tinfo)	$(HEADER_DEPS)
 use_window	lib		$(base)		$(HEADER_DEPS)
 wresize		lib		$(base)		$(HEADER_DEPS)
+tdelete	lib		$(base)		$(HEADER_DEPS)  $(srcdir)/search.priv.h
+tdestroy	lib		$(base)		$(HEADER_DEPS)  $(srcdir)/search.priv.h
+tfind	lib		$(base)		$(HEADER_DEPS)  $(srcdir)/search.priv.h
+tsearch	lib		$(base)		$(HEADER_DEPS)  $(srcdir)/search.priv.h
+twalk	lib		$(base)		$(HEADER_DEPS)  $(srcdir)/search.priv.h
+
 
 # Support for termcap (and tic, etc.), which can be a separate library
 @ termlib
diff -urN ncurses-6.5-orig/ncurses/search.priv.h ncurses-6.5/ncurses/search.priv.h
--- ncurses-6.5-orig/ncurses/search.priv.h	1970-01-01 08:00:00.000000000 +0800
+++ ncurses-6.5/ncurses/search.priv.h	2024-11-26 15:53:17.551633000 +0800
@@ -0,0 +1,60 @@
+/**
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER.PD within this package.
+ */
+#ifndef _INC_SEARCH
+#define _INC_SEARCH
+
+#include <corecrt.h>
+#include <stddef.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+Documentation for these POSIX definitions and prototypes can be found in 
+The Open Group Base Specifications Issue 6
+IEEE Std 1003.1, 2004 Edition.
+eg:  http://www.opengroup.org/onlinepubs/009695399/functions/twalk.html
+*/
+
+typedef struct entry {
+	char *key;
+	void *data;
+} ENTRY;
+
+typedef enum {
+	FIND,
+	ENTER
+} ACTION;
+
+typedef enum {
+	preorder,
+	postorder,
+	endorder,
+	leaf
+} VISIT;
+
+#ifdef _SEARCH_PRIVATE
+typedef struct node {
+	char         *key;
+	struct node  *llink, *rlink;
+} node_t;
+#endif
+
+void * __cdecl tdelete (const void * __restrict, void ** __restrict, int (*)(const void *, const void *));
+void * __cdecl tfind (const void *, void * const *, int (*)(const void *, const void *));
+void * __cdecl tsearch (const void *, void **, int (*)(const void *, const void *));
+void __cdecl twalk (const void *, void (*)(const void *, VISIT, int));
+
+#ifdef _GNU_SOURCE
+void __cdecl tdestroy(void *, void (*)(void *));
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -urN ncurses-6.5-orig/ncurses/tinfo/lib_win32con.c ncurses-6.5/ncurses/tinfo/lib_win32con.c
--- ncurses-6.5-orig/ncurses/tinfo/lib_win32con.c	2023-08-06 04:44:38.000000000 +0800
+++ ncurses-6.5/ncurses/tinfo/lib_win32con.c	2024-11-26 15:53:17.551633000 +0800
@@ -36,6 +36,7 @@
  * TODO - GetMousePos(POINT * result) from ntconio.c
  */
 
+#define NEED_KEY_EVENT
 #include <curses.priv.h>
 
 MODULE_ID("$Id: lib_win32con.c,v 1.14 2023/08/05 20:44:38 tom Exp $")
