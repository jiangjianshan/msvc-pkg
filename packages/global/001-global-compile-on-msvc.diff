diff -urN global-6.6.14-orig/configure global-6.6.14/configure
--- global-6.6.14-orig/configure	2024-12-11 14:44:41.000000000 +0800
+++ global-6.6.14/configure	2025-02-06 16:13:36.693284400 +0800
@@ -15495,9 +15495,6 @@
 
 fi
 
-if test ${ac_header_dirent} = no; then
-        as_fn_error $? "dirent(3) is required but not found." "$LINENO" 5
-fi
 
 case "$host_os" in
 	mingw*|*djgpp*)
@@ -17902,7 +17899,7 @@
 			if ! test -r "$withval/include/sqlite3.h"; then
 				as_fn_error $? "header $withval/include/sqlite3.h not found." "$LINENO" 5
 			fi
-			if ! test -r "$withval/lib/libsqlite3.so" && ! test -r "$withval/lib/libsqlite3.dylib"; then
+			if ! test -r "$withval/bin/sqlite3.dll" && ! test -r "$withval/lib/libsqlite3.lib"; then
 				as_fn_error $? "library $withval/lib/libsqlite3.* not found." "$LINENO" 5
 			fi
 			 if false; then
diff -urN global-6.6.14-orig/global/global.c global-6.6.14/global/global.c
--- global-6.6.14-orig/global/global.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/global/global.c	2025-02-06 16:07:31.354996200 +0800
@@ -1146,7 +1146,11 @@
 	}
 	if (debug)
 		fprintf(stderr, "completion_idutils: %s\n", strbuf_value(sb));
+#ifdef _MSC_VER
+	if (!(ip = _popen(strbuf_value(sb), "r")))
+#else
 	if (!(ip = popen(strbuf_value(sb), "r")))
+#endif
 		die("cannot execute '%s'.", strbuf_value(sb));
 #else
 	/*
@@ -1191,7 +1195,11 @@
 		count++;
 	}
 #if (defined(_WIN32) && !defined(__CYGWIN__)) || defined(__DJGPP__)
+#ifdef _MSC_VER
+	if (_pclose(ip) != 0)
+#else
 	if (pclose(ip) != 0)
+#endif
 		die("terminated abnormally (errno = %d).", errno);
 #else
 	if (secure_pclose(ip) != 0)
@@ -1373,7 +1381,11 @@
 	strbuf_puts(ib, quote_shell(pattern));
 	if (debug)
 		fprintf(stderr, "idutils: %s\n", strbuf_value(ib));
+#ifdef _MSC_VER
+	if (!(ip = _popen(strbuf_value(ib), "r")))
+#else
 	if (!(ip = popen(strbuf_value(ib), "r")))
+#endif
 		die("cannot execute '%s'.", strbuf_value(ib));
 #else
 	/*
@@ -1454,7 +1466,11 @@
 		}
 	}
 #if (defined(_WIN32) && !defined(__CYGWIN__)) || defined(__DJGPP__)
+#ifdef _MSC_VER
+	if (_pclose(ip) != 0)
+#else
 	if (pclose(ip) != 0)
+#endif
 		die("terminated abnormally (errno = %d).", errno);
 #else
 	if (secure_pclose(ip) != 0)
diff -urN global-6.6.14-orig/global/literal.c global-6.6.14/global/literal.c
--- global-6.6.14-orig/global/literal.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/global/literal.c	2025-02-06 16:07:31.361332900 +0800
@@ -29,7 +29,9 @@
 #endif
 #include <stdio.h>
 #include <ctype.h>
+#ifdef HAVE_SYS_PARAM_H
 #include <sys/param.h>
+#endif
 #include <sys/stat.h>
 #include <errno.h>
 #ifdef STDC_HEADERS
diff -urN global-6.6.14-orig/gtags/gtags.c global-6.6.14/gtags/gtags.c
--- global-6.6.14-orig/gtags/gtags.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags/gtags.c	2025-02-06 16:07:31.365818500 +0800
@@ -619,7 +619,11 @@
 		}
 		if (debug)
 			fprintf(stderr, "executing mkid like: %s\n", strbuf_value(sb));
+#ifdef _MSC_VER
+		op = _popen(strbuf_value(sb), "w");
+#else
 		op = popen(strbuf_value(sb), "w");
+#endif
 		if (op == NULL)
 			die("cannot execute '%s'.", strbuf_value(sb));
 		gp = gfind_open(dbpath, NULL, GPATH_BOTH, 0);
@@ -628,7 +632,11 @@
 			fputc('\0', op);
 		}
 		gfind_close(gp);
+#ifdef _MSC_VER
+		if (_pclose(op) != 0)
+#else
 		if (pclose(op) != 0)
+#endif
 			die("terminated abnormally '%s' (errno = %d).", strbuf_value(sb), errno);
 		if (test("f", makepath(dbpath, "ID", NULL)))
 			if (chmod(makepath(dbpath, "ID", NULL), 0644) < 0)
diff -urN global-6.6.14-orig/gtags-cscope/exec.c global-6.6.14/gtags-cscope/exec.c
--- global-6.6.14-orig/gtags-cscope/exec.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/exec.c	2025-02-06 16:07:31.371490900 +0800
@@ -36,11 +36,13 @@
  *	cscope - interactive C symbol cross-reference
  */
 
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include "global-cscope.h"
 #include <stdarg.h>
 #include <sys/types.h>      /* pid_t */
-#ifdef __DJGPP__
+#if defined(__DJGPP__) || defined(_MSC_VER)
 #include <process.h>
 #endif
 #if defined(USE_NCURSES) && !defined(RENAMED_NCURSES)
diff -urN global-6.6.14-orig/gtags-cscope/global-cscope.h global-6.6.14/gtags-cscope/global-cscope.h
--- global-6.6.14-orig/gtags-cscope/global-cscope.h	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/global-cscope.h	2025-02-06 16:07:31.376183500 +0800
@@ -42,7 +42,9 @@
 #define CSCOPE_GLOBAL_H
 
 #include "config.h"
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <sys/types.h>
 #include <ctype.h>	/* isalpha, isdigit, etc. */
 #include <signal.h>	/* SIGINT and SIGQUIT */
@@ -158,6 +160,21 @@
 # endif
 #endif
 
+#ifdef WIN32
+// Access flags are normally defined in unistd.h, which unavailable under
+// Windows. Instead, define the flags as documented at
+// https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess
+#ifndef F_OK
+#define F_OK 0
+#endif
+#ifndef W_OK
+#define W_OK 2
+#endif
+#ifndef R_OK
+#define R_OK 4
+#endif
+#endif
+
 /* access(2) parameters. Only make assumptions about their values if
  * <unistd.h> fails to define them. */
 #ifdef R_OK
diff -urN global-6.6.14-orig/gtags-cscope/gtags-cscope.c global-6.6.14/gtags-cscope/gtags-cscope.c
--- global-6.6.14-orig/gtags-cscope/gtags-cscope.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/gtags-cscope.c	2025-02-06 16:07:31.380551900 +0800
@@ -53,7 +53,9 @@
 #include "const.h"
 
 #include <stdlib.h>	/* atoi */
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #if defined(USE_NCURSES) && !defined(RENAMED_NCURSES)
 #include <ncurses.h>
 #else
diff -urN global-6.6.14-orig/gtags-cscope/logdir.c global-6.6.14/gtags-cscope/logdir.c
--- global-6.6.14-orig/gtags-cscope/logdir.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/logdir.c	2025-02-06 16:07:31.386419800 +0800
@@ -39,7 +39,9 @@
  *	storage allocation.
  */
 
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <string.h>
 #include "global-cscope.h"
 
diff -urN global-6.6.14-orig/gtags-cscope/mypopen.c global-6.6.14/gtags-cscope/mypopen.c
--- global-6.6.14-orig/gtags-cscope/mypopen.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/mypopen.c	2025-02-06 16:07:31.390410800 +0800
@@ -32,7 +32,9 @@
 
 #include <stdio.h>
 #include <signal.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <fcntl.h>
 #include <sys/types.h>
 #include "global-cscope.h"	/* pid_t, RETSIGTYPE, shell, and mybasename() */
@@ -137,7 +139,11 @@
 #ifdef MS_OS
 	/* HBB 20010312: Has its own implementation of popen(), which
 	 * is better suited to the platform than cscope's */
+#ifdef _MSC_VER
+	return (_popen)(cmd, mode);
+#else
 	return (popen)(cmd, mode);
+#endif
 #else
 	int	p[2];
 	pid_t *poptr;
@@ -191,7 +197,11 @@
 #ifdef MS_OS
 	/* HBB 20010705: This system has its own pclose(), which we
 	 * don't want to replace */
+#ifdef _MSC_VER
+	return (_pclose)(ptr);
+#else
 	return (pclose)(ptr);
+#endif
 #else
 	f = fileno(ptr);
 	(void) fclose(ptr);
diff -urN global-6.6.14-orig/htags/defineindex.c global-6.6.14/htags/defineindex.c
--- global-6.6.14-orig/htags/defineindex.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags/defineindex.c	2025-02-06 16:07:31.394660300 +0800
@@ -100,7 +100,11 @@
 	 */
 	STDOUT = DEFINES;
 	snprintf(command, sizeof(command), PQUOTE "%s -c" PQUOTE, quote_shell(global_path));
+#ifdef _MSC_VER
+	if ((TAGS = _popen(command, "r")) == NULL)
+#else
 	if ((TAGS = popen(command, "r")) == NULL)
+#endif
 		die("cannot execute '%s'.", command);
 	alpha[0] = '\0';
 	while ((_ = strbuf_fgets(sb, TAGS, STRBUF_NOCRLF)) != NULL) {
@@ -244,7 +248,11 @@
 		if (map_file)
 			fprintf(MAP, "%s\t%s\n", tag, url_for_map);
 	}
+#ifdef _MSC_VER
+	if (_pclose(TAGS) != 0)
+#else
 	if (pclose(TAGS) != 0)
+#endif
 		die("terminated abnormally '%s' (errno = %d).", command, errno);
 	if (aflag && alpha[0]) {
 		char tmp[128];
diff -urN global-6.6.14-orig/htags/dupindex.c global-6.6.14/htags/dupindex.c
--- global-6.6.14-orig/htags/dupindex.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags/dupindex.c	2025-02-06 16:07:31.399807800 +0800
@@ -95,7 +95,11 @@
 #if defined(_WIN32) && !defined(__CYGWIN__)
 		strbuf_putc(command, '"');
 #endif
+#ifdef _MSC_VER
+		if ((ip = _popen(strbuf_value(command), "r")) == NULL)
+#else
 		if ((ip = popen(strbuf_value(command), "r")) == NULL)
+#endif
 			die("cannot execute '%s'.", strbuf_value(command));
 		while ((ctags_xid = strbuf_fgets(sb, ip, STRBUF_NOCRLF)) != NULL) {
 			char fid[MAXFIDLEN];
@@ -175,7 +179,11 @@
 		}
 		if (db == GTAGS)
 			definition_count = count;
+#ifdef _MSC_VER
+		if (_pclose(ip) != 0)
+#else
 		if (pclose(ip) != 0)
+#endif
 			die("terminated abnormally '%s' (errno = %d).", strbuf_value(command), errno);
 		if (writing) {
 			if (!dynamic) {
diff -urN global-6.6.14-orig/htags/fileindex.c global-6.6.14/htags/fileindex.c
--- global-6.6.14-orig/htags/fileindex.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags/fileindex.c	2025-02-06 16:07:31.404206800 +0800
@@ -809,7 +809,11 @@
 	 * Therefore, we can not use "\\t" here.
 	 */
 	snprintf(command, sizeof(command), PQUOTE "%s -gnx --encode-path=\" \t\" \"^[ \t]*(#[ \t]*(import|include)|include[ \t]*\\()\"" PQUOTE, quote_shell(global_path));
+#ifdef _MSC_VER
+	if ((PIPE = _popen(command, "r")) == NULL)
+#else
 	if ((PIPE = popen(command, "r")) == NULL)
+#endif
 		die("cannot execute '%s'.", command);
 	strbuf_reset(input);
 	while ((ctags_x = strbuf_fgets(input, PIPE, STRBUF_NOCRLF)) != NULL) {
@@ -847,7 +851,11 @@
 		}
 		put_included(inc, buf);
 	}
+#ifdef _MSC_VER
+	if (_pclose(PIPE) != 0)
+#else
 	if (pclose(PIPE) != 0)
+#endif
 		die("terminated abnormally '%s' (errno = %d).", command, errno);
 
 	for (inc = first_inc(); inc; inc = next_inc()) {
diff -urN global-6.6.14-orig/htags/htags.c global-6.6.14/htags/htags.c
--- global-6.6.14-orig/htags/htags.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags/htags.c	2025-02-06 16:07:31.409262400 +0800
@@ -38,7 +38,9 @@
 #include <signal.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#ifdef HAVE_SYS_PARAM_H
 #include <sys/param.h>
+#endif
 #include <errno.h>
 
 #include "getopt.h"
@@ -861,7 +863,11 @@
 			strbuf_sprintf(sb, "%sMAINS%s\n", header_begin, header_end);
 
 			snprintf(buf, sizeof(buf), PQUOTE "%s --result=ctags-xid --encode-path=\" \t\" --nofilter=path %s" PQUOTE, quote_shell(global_path), main_func);
+#ifdef _MSC_VER
+			ip = _popen(buf, "r");
+#else
 			ip = popen(buf, "r");
+#endif
 			if (!ip)
 				die("cannot execute '%s'.", buf);
 			strbuf_puts_nl(sb, gen_list_begin());
@@ -872,7 +878,11 @@
 				strbuf_puts_nl(sb, gen_list_body(SRCS, ctags_x, fid));
 			}
 			strbuf_puts_nl(sb, gen_list_end());
+#ifdef _MSC_VER
+			if (_pclose(ip) != 0)
+#else
 			if (pclose(ip) != 0)
+#endif
 				die("terminated abnormally '%s' (errno = %d).", buf, errno);
 			strbuf_puts_nl(sb, hr);
 			break;
@@ -1015,7 +1025,11 @@
 	 * save config values.
 	 */
 	snprintf(command, sizeof(command), PQUOTE "%s --config" PQUOTE, quote_shell(gtags_path));
+#ifdef _MSC_VER
+	if ((ip = _popen(command, "r")) == NULL)
+#else
 	if ((ip = popen(command, "r")) == NULL)
+#endif
 		die("cannot execute '%s'.", command);
 	while (strbuf_fgets(sb, ip, STRBUF_NOCRLF) != NULL) {
 		for (p = strbuf_value(sb); *p; p++) {
@@ -1029,7 +1043,11 @@
 				strbuf_putc(save_c, *p);
 		}
 	}
+#ifdef _MSC_VER
+	if (_pclose(ip) != 0)
+#else
 	if (pclose(ip) != 0)
+#endif
 		die("terminated abnormally '%s' (errno = %d).", command, errno);
 	strbuf_close(sb);
 	save_config = strbuf_value(save_c);
diff -urN global-6.6.14-orig/htags-refkit/htags_path2url.c global-6.6.14/htags-refkit/htags_path2url.c
--- global-6.6.14-orig/htags-refkit/htags_path2url.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags-refkit/htags_path2url.c	2025-02-06 16:07:31.414762400 +0800
@@ -10,7 +10,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#ifdef HAVE_SYS_PARAM_H
 #include <sys/param.h>
+#endif
 #include <sys/stat.h>
 
 #if defined(_WIN32) || defined(__DJGPP__)
diff -urN global-6.6.14-orig/libdb/sqlite3.c global-6.6.14/libdb/sqlite3.c
--- global-6.6.14-orig/libdb/sqlite3.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libdb/sqlite3.c	2025-02-06 16:07:31.442125400 +0800
@@ -17,6 +17,35 @@
 ** language. The code for the "sqlite3" command-line shell is also in a
 ** separate file. This file contains only code for the core SQLite library.
 */
+#ifdef WIN32
+// Access flags are normally defined in unistd.h, which unavailable under
+// Windows. Instead, define the flags as documented at
+// https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess
+#ifndef F_OK
+#define F_OK 0
+#endif
+#ifndef W_OK
+#define W_OK 2
+#endif
+#ifndef R_OK
+#define R_OK 4
+#endif
+#endif
+
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 #define SQLITE_CORE 1
 #define SQLITE_AMALGAMATION 1
 #ifndef SQLITE_PRIVATE
@@ -24682,7 +24711,9 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 /* #include <time.h> */
 #include <sys/time.h>
 #include <errno.h>
@@ -24697,7 +24728,9 @@
 #  include <limits.h>
 # else
 #  include <sys/file.h>
+#ifdef HAVE_SYS_PARAM_H
 #  include <sys/param.h>
+#endif
 # endif
 #endif /* SQLITE_ENABLE_LOCKING_STYLE */
 
@@ -24705,9 +24738,7 @@
 # include <sys/mount.h>
 #endif
 
-#ifdef HAVE_UTIME
 # include <utime.h>
-#endif
 
 /*
 ** Allowed values of unixFile.fsFlags
@@ -26925,12 +26956,8 @@
   if( pFile->eFileLock > NO_LOCK ){
     pFile->eFileLock = eFileLock;
     /* Always update the timestamp on the old file */
-#ifdef HAVE_UTIME
     utime(zLockFile, NULL);
-#else
-    utimes(zLockFile, NULL);
-#endif
-    return SQLITE_OK;
+   return SQLITE_OK;
   }
   
   /* grab an exclusive lock */
diff -urN global-6.6.14-orig/libglibc/dirent.c global-6.6.14/libglibc/dirent.c
--- global-6.6.14-orig/libglibc/dirent.c	1970-01-01 08:00:00.000000000 +0800
+++ global-6.6.14/libglibc/dirent.c	2025-02-06 16:07:31.463789300 +0800
@@ -0,0 +1,325 @@
+/*
+ * dirent.c
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-runtime package.
+ * No warranty is given; refer to the file DISCLAIMER within the package.
+ *
+ * Derived from DIRLIB.C by Matt J. Weinstein
+ * This note appears in the DIRLIB.H
+ * DIRLIB.H by M. J. Weinstein   Released to public domain 1-Jan-89
+ *
+ * Updated by Jeremy Bettis <jeremy@hksys.com>
+ * Significantly revised and rewinddir, seekdir and telldir added by Colin
+ * Peters <colin@fu.is.saga-u.ac.jp>
+ *	
+ */
+
+#ifndef WIN32_LEAN_AND_MEAN
+#define WIN32_LEAN_AND_MEAN
+#endif
+
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <io.h>
+#include <direct.h>
+#include <dirent.h>
+
+#include <windows.h> /* for GetFileAttributes */
+
+#include <tchar.h>
+#define SUFFIX	_T("*")
+#define	SLASH	_T("\\")
+
+
+/*
+ * opendir
+ *
+ * Returns a pointer to a DIR structure appropriately filled in to begin
+ * searching a directory.
+ */
+DIR *
+opendir (const _TCHAR *szPath)
+{
+  DIR *nd;
+  unsigned int rc;
+  _TCHAR szFullPath[MAX_PATH];
+
+  errno = 0;
+
+  if (!szPath)
+    {
+      errno = EFAULT;
+      return (DIR *) 0;
+    }
+
+  if (szPath[0] == _T('\0'))
+    {
+      errno = ENOTDIR;
+      return (DIR *) 0;
+    }
+
+  /* Attempt to determine if the given path really is a directory. */
+  rc = GetFileAttributes (szPath);
+  if (rc == INVALID_FILE_ATTRIBUTES)
+    {
+      /* call GetLastError for more error info */
+      errno = ENOENT;
+      return (DIR *) 0;
+    }
+  if (!(rc & FILE_ATTRIBUTE_DIRECTORY))
+    {
+      /* Error, entry exists but not a directory. */
+      errno = ENOTDIR;
+      return (DIR *) 0;
+    }
+
+  /* Make an absolute pathname.  */
+  _tfullpath (szFullPath, szPath, MAX_PATH);
+
+  /* Allocate enough space to store DIR structure and the complete
+   * directory path given. */
+  nd = (DIR *) malloc (sizeof (DIR) + (_tcslen (szFullPath)
+					   + _tcslen (SLASH)
+					   + _tcslen (SUFFIX) + 1)
+					  * sizeof (_TCHAR));
+
+  if (!nd)
+    {
+      /* Error, out of memory. */
+      errno = ENOMEM;
+      return (DIR *) 0;
+    }
+
+  /* Create the search expression. */
+  _tcscpy (nd->dd_name, szFullPath);
+
+  /* Add on a slash if the path does not end with one. */
+  if (nd->dd_name[0] != _T('\0') &&
+      nd->dd_name[_tcslen (nd->dd_name) - 1] != _T('/') &&
+      nd->dd_name[_tcslen (nd->dd_name) - 1] != _T('\\'))
+    {
+      _tcscat (nd->dd_name, SLASH);
+    }
+
+  /* Add on the search pattern */
+  _tcscat (nd->dd_name, SUFFIX);
+
+  /* Initialize handle to -1 so that a premature closedir doesn't try
+   * to call _findclose on it. */
+  nd->dd_handle = -1;
+
+  /* Initialize the status. */
+  nd->dd_stat = 0;
+
+  /* Initialize the dirent structure. ino and reclen are invalid under
+   * Win32, and name simply points at the appropriate part of the
+   * findfirst_t structure. */
+  nd->dd_dir.d_ino = 0;
+  nd->dd_dir.d_reclen = 0;
+  nd->dd_dir.d_namlen = 0;
+  memset (nd->dd_dir.d_name, 0, 260 * sizeof(nd->dd_dir.d_name[0])  /*FILENAME_MAX*/);
+
+  return nd;
+}
+
+
+/*
+ * readdir
+ *
+ * Return a pointer to a dirent structure filled with the information on the
+ * next entry in the directory.
+ */
+struct dirent *
+readdir (DIR * dirp)
+{
+  errno = 0;
+
+  /* Check for valid DIR struct. */
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return (struct dirent *) 0;
+    }
+
+  if (dirp->dd_stat < 0)
+    {
+      /* We have already returned all files in the directory
+       * (or the structure has an invalid dd_stat). */
+      return (struct dirent *) 0;
+    }
+  else if (dirp->dd_stat == 0)
+    {
+      /* We haven't started the search yet. */
+      /* Start the search */
+      dirp->dd_handle = _tfindfirst (dirp->dd_name, &(dirp->dd_dta));
+
+      if (dirp->dd_handle == -1)
+	{
+	  /* Whoops! Seems there are no files in that
+	   * directory. */
+	  dirp->dd_stat = -1;
+	}
+      else
+	{
+	  dirp->dd_stat = 1;
+	}
+    }
+  else
+    {
+      /* Get the next search entry. */
+      if (_tfindnext (dirp->dd_handle, &(dirp->dd_dta)))
+	{
+	  /* We are off the end or otherwise error.
+	     _findnext sets errno to ENOENT if no more file
+	     Undo this. */
+	  DWORD winerr = GetLastError ();
+	  if (winerr == ERROR_NO_MORE_FILES)
+	    errno = 0;
+	  _findclose (dirp->dd_handle);
+	  dirp->dd_handle = -1;
+	  dirp->dd_stat = -1;
+	}
+      else
+	{
+	  /* Update the status to indicate the correct
+	   * number. */
+	  dirp->dd_stat++;
+	}
+    }
+
+  if (dirp->dd_stat > 0)
+    {
+      /* Successfully got an entry. Everything about the file is
+       * already appropriately filled in except the length of the
+       * file name. */
+      dirp->dd_dir.d_namlen = _tcslen (dirp->dd_dta.name);
+      _tcscpy (dirp->dd_dir.d_name, dirp->dd_dta.name);
+      return &dirp->dd_dir;
+    }
+
+  return (struct dirent *) 0;
+}
+
+
+/*
+ * closedir
+ *
+ * Frees up resources allocated by opendir.
+ */
+int
+closedir (DIR * dirp)
+{
+  int rc;
+
+  errno = 0;
+  rc = 0;
+
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return -1;
+    }
+
+  if (dirp->dd_handle != -1)
+    {
+      rc = _findclose (dirp->dd_handle);
+    }
+
+  /* Delete the dir structure. */
+  free (dirp);
+
+  return rc;
+}
+
+/*
+ * rewinddir
+ *
+ * Return to the beginning of the directory "stream". We simply call findclose
+ * and then reset things like an opendir.
+ */
+void
+rewinddir (DIR * dirp)
+{
+  errno = 0;
+
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return;
+    }
+
+  if (dirp->dd_handle != -1)
+    {
+      _findclose (dirp->dd_handle);
+    }
+
+  dirp->dd_handle = -1;
+  dirp->dd_stat = 0;
+}
+
+/*
+ * telldir
+ *
+ * Returns the "position" in the "directory stream" which can be used with
+ * seekdir to go back to an old entry. We simply return the value in stat.
+ */
+long
+telldir (DIR * dirp)
+{
+  errno = 0;
+
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return -1;
+    }
+  return dirp->dd_stat;
+}
+
+/*
+ * seekdir
+ *
+ * Seek to an entry previously returned by telldir. We rewind the directory
+ * and call readdir repeatedly until either dd_stat is the position number
+ * or -1 (off the end). This is not perfect, in that the directory may
+ * have changed while we weren't looking. But that is probably the case with
+ * any such system.
+ */
+void
+seekdir (DIR * dirp, long lPos)
+{
+  errno = 0;
+
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return;
+    }
+
+  if (lPos < -1)
+    {
+      /* Seeking to an invalid position. */
+      errno = EINVAL;
+      return;
+    }
+  else if (lPos == -1)
+    {
+      /* Seek past end. */
+      if (dirp->dd_handle != -1)
+	{
+	  _findclose (dirp->dd_handle);
+	}
+      dirp->dd_handle = -1;
+      dirp->dd_stat = -1;
+    }
+  else
+    {
+      /* Rewind and read forward to the appropriate index. */
+      rewinddir (dirp);
+
+      while ((dirp->dd_stat < lPos) && readdir (dirp))
+	;
+    }
+}
+
diff -urN global-6.6.14-orig/libglibc/dirent.h global-6.6.14/libglibc/dirent.h
--- global-6.6.14-orig/libglibc/dirent.h	1970-01-01 08:00:00.000000000 +0800
+++ global-6.6.14/libglibc/dirent.h	2025-02-06 16:07:31.467779100 +0800
@@ -0,0 +1,148 @@
+/*
+ * DIRENT.H (formerly DIRLIB.H)
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-runtime package.
+ * No warranty is given; refer to the file DISCLAIMER within the package.
+ *
+ */
+
+#ifndef _DIRENT_H_
+#define _DIRENT_H_
+
+/* All the headers include this file. */
+#include <corecrt.h>
+
+#include <io.h>
+
+#ifndef RC_INVOKED
+
+#pragma pack(push,_CRT_PACKING)
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct _tdirent
+{
+	long		d_ino;		/* Always zero. */
+	unsigned short	d_reclen;	/* Always zero. */
+	unsigned short	d_namlen;	/* Length of name in d_name. */
+	char		d_name[260]; /* [FILENAME_MAX] */ /* File name. */
+};
+
+/*
+ * This is an internal data structure. Good programmers will not use it
+ * except as an argument to one of the functions below.
+ * dd_stat field is now int (was short in older versions).
+ */
+typedef struct
+{
+	/* disk transfer area for this dir */
+	struct _finddata_t	dd_dta;
+
+	/* dirent struct to return from dir (NOTE: this makes this thread
+	 * safe as long as only one thread uses a particular DIR struct at
+	 * a time) */
+	struct _tdirent		dd_dir;
+
+	/* _findnext handle */
+	intptr_t		dd_handle;
+
+	/*
+	 * Status of search:
+	 *   0 = not started yet (next entry to read is first entry)
+	 *  -1 = off the end
+	 *   positive = 0 based index of next entry
+	 */
+	int			dd_stat;
+
+	/* given path for dir with search pattern (struct is extended) */
+	char			dd_name[1];
+} _TDIR;
+
+_TDIR* __cdecl _topendir (const char*);
+struct _tdirent* __cdecl _treaddir (_TDIR*);
+int __cdecl _tclosedir (_TDIR*);
+void __cdecl _trewinddir (_TDIR*);
+long __cdecl _ttelldir (_TDIR*);
+void __cdecl _tseekdir (_TDIR*, long);
+
+
+/* wide char versions */
+
+struct _wdirent
+{
+	long		d_ino;		/* Always zero. */
+	unsigned short	d_reclen;	/* Always zero. */
+	unsigned short	d_namlen;	/* Length of name in d_name. */
+	wchar_t		d_name[260]; /* [FILENAME_MAX] */ /* File name. */
+};
+
+/*
+ * This is an internal data structure. Good programmers will not use it
+ * except as an argument to one of the functions below.
+ */
+typedef struct
+{
+	/* disk transfer area for this dir */
+	struct _wfinddata_t	dd_dta;
+
+	/* dirent struct to return from dir (NOTE: this makes this thread
+	 * safe as long as only one thread uses a particular DIR struct at
+	 * a time) */
+	struct _wdirent		dd_dir;
+
+	/* _findnext handle */
+	intptr_t		dd_handle;
+
+	/*
+	 * Status of search:
+	 *   0 = not started yet (next entry to read is first entry)
+	 *  -1 = off the end
+	 *   positive = 0 based index of next entry
+	 */
+	int			dd_stat;
+
+	/* given path for dir with search pattern (struct is extended) */
+	wchar_t			dd_name[1];
+} _WDIR;
+
+_WDIR* __cdecl _wopendir (const wchar_t*);
+struct _wdirent* __cdecl _wreaddir (_WDIR*);
+int __cdecl _wclosedir (_WDIR*);
+void __cdecl _wrewinddir (_WDIR*);
+long __cdecl _wtelldir (_WDIR*);
+void __cdecl _wseekdir (_WDIR*, long);
+
+#ifdef _UNICODE
+/* dirent structures and functions */
+# define dirent	    _wdirent
+# define DIR 		    _WDIR
+# define opendir	  _wopendir
+# define closedir	  _wclosedir
+# define readdir	  _wreaddir
+# define rewinddir	_wrewinddir
+# define telldir	  _wtelldir
+# define seekdir	  _wseekdir
+#else
+/* dirent structures and functions */
+# define dirent	    _tdirent
+# define DIR        _TDIR
+# define opendir	  _topendir
+# define closedir	  _tclosedir
+# define readdir	  _treaddir
+# define rewinddir	_trewinddir
+# define telldir	  _ttelldir
+# define seekdir	  _tseekdir
+#endif
+
+#ifdef	__cplusplus
+}
+#endif
+
+#pragma pack(pop)
+
+#endif	/* Not RC_INVOKED */
+
+#endif	/* Not _DIRENT_H_ */
+
diff -urN global-6.6.14-orig/libglibc/getopt.c global-6.6.14/libglibc/getopt.c
--- global-6.6.14-orig/libglibc/getopt.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libglibc/getopt.c	2025-02-06 16:07:31.472766700 +0800
@@ -57,7 +57,9 @@
 /* Don't include stdlib.h for non-GNU C libraries because some of them
    contain conflicting prototypes for getopt.  */
 # include <stdlib.h>
+#ifdef HAVE_UNISTD_H
 # include <unistd.h>
+#endif
 #endif	/* GNU C library.  */
 
 #include <string.h>
diff -urN global-6.6.14-orig/libglibc/Makefile.am global-6.6.14/libglibc/Makefile.am
--- global-6.6.14-orig/libglibc/Makefile.am	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libglibc/Makefile.am	2025-02-06 16:07:31.478009200 +0800
@@ -12,8 +12,8 @@
 #
 noinst_LIBRARIES = libgloglibc.a
 
-INCS = regex.h getopt.h obstack.h hash-string.h getopt_int.h fnmatch.h
-SRCS = regex.c getopt.c getopt1.c snprintf.c obstack.c hash-string.c fnmatch.c
+INCS = dirent.h regex.h getopt.h obstack.h hash-string.h getopt_int.h fnmatch.h
+SRCS = dirent.c regex.c getopt.c getopt1.c snprintf.c obstack.c hash-string.c fnmatch.c
 
 noinst_HEADERS = $(INCS)
 libgloglibc_a_SOURCES = $(SRCS)
diff -urN global-6.6.14-orig/libglibc/Makefile.in global-6.6.14/libglibc/Makefile.in
--- global-6.6.14-orig/libglibc/Makefile.in	2024-12-11 14:44:41.000000000 +0800
+++ global-6.6.14/libglibc/Makefile.in	2025-02-06 16:07:31.482996200 +0800
@@ -116,7 +116,7 @@
 libgloglibc_a_AR = $(AR) $(ARFLAGS)
 libgloglibc_a_RANLIB = $(RANLIB)
 libgloglibc_a_LIBADD =
-am__objects_1 = regex.$(OBJEXT) getopt.$(OBJEXT) getopt1.$(OBJEXT) \
+am__objects_1 = dirent.$(OBJEXT) regex.$(OBJEXT) getopt.$(OBJEXT) getopt1.$(OBJEXT) \
 	snprintf.$(OBJEXT) obstack.$(OBJEXT) hash-string.$(OBJEXT) \
 	fnmatch.$(OBJEXT)
 am_libgloglibc_a_OBJECTS = $(am__objects_1)
@@ -139,7 +139,7 @@
 am__depfiles_remade = ./$(DEPDIR)/fnmatch.Po ./$(DEPDIR)/getopt.Po \
 	./$(DEPDIR)/getopt1.Po ./$(DEPDIR)/hash-string.Po \
 	./$(DEPDIR)/obstack.Po ./$(DEPDIR)/regex.Po \
-	./$(DEPDIR)/snprintf.Po
+	./$(DEPDIR)/snprintf.Po ./$(DEPDIR)/dirent.Po
 am__mv = mv -f
 COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
 	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
@@ -359,8 +359,8 @@
 # implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 #
 noinst_LIBRARIES = libgloglibc.a
-INCS = regex.h getopt.h obstack.h hash-string.h getopt_int.h fnmatch.h
-SRCS = regex.c getopt.c getopt1.c snprintf.c obstack.c hash-string.c fnmatch.c
+INCS = dirent.h regex.h getopt.h obstack.h hash-string.h getopt_int.h fnmatch.h utime.h
+SRCS = dirent.c regex.c getopt.c getopt1.c snprintf.c obstack.c hash-string.c fnmatch.c
 noinst_HEADERS = $(INCS)
 libgloglibc_a_SOURCES = $(SRCS)
 libgloglibc_a_DEPENDENCIES = $(libgloglibc_a_LIBADD)
@@ -419,6 +419,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/obstack.Po@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/regex.Po@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/snprintf.Po@am__quote@ # am--include-marker
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dirent.Po@am__quote@ # am--include-marker
 
 $(am__depfiles_remade):
 	@$(MKDIR_P) $(@D)
@@ -587,6 +588,7 @@
 	-rm -f ./$(DEPDIR)/obstack.Po
 	-rm -f ./$(DEPDIR)/regex.Po
 	-rm -f ./$(DEPDIR)/snprintf.Po
+	-rm -f ./$(DEPDIR)/dirent.Po
 	-rm -f Makefile
 distclean-am: clean-am distclean-compile distclean-generic \
 	distclean-tags
@@ -639,6 +641,7 @@
 	-rm -f ./$(DEPDIR)/obstack.Po
 	-rm -f ./$(DEPDIR)/regex.Po
 	-rm -f ./$(DEPDIR)/snprintf.Po
+	-rm -f ./$(DEPDIR)/dirent.Po
 	-rm -f Makefile
 maintainer-clean-am: distclean-am maintainer-clean-generic
 
diff -urN global-6.6.14-orig/libglibc/regex.c global-6.6.14/libglibc/regex.c
--- global-6.6.14-orig/libglibc/regex.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libglibc/regex.c	2025-02-06 16:07:31.489125100 +0800
@@ -297,11 +297,14 @@
 /* Make alloca work the best possible way.  */
 #  ifdef __GNUC__
 #   define alloca __builtin_alloca
-#  else /* not __GNUC__ */
+#  elif defined _MSC_VER
+#   include <malloc.h>
+#   define alloca _alloca
+#  else /* not __GNUC__ and _MSC_VER */
 #   if HAVE_ALLOCA_H
 #    include <alloca.h>
 #   endif /* HAVE_ALLOCA_H */
-#  endif /* not __GNUC__ */
+#  endif /* not __GNUC__ and _MSC_VER */
 
 # endif /* not alloca */
 
diff -urN global-6.6.14-orig/libglibc/utime.h global-6.6.14/libglibc/utime.h
--- global-6.6.14-orig/libglibc/utime.h	1970-01-01 08:00:00.000000000 +0800
+++ global-6.6.14/libglibc/utime.h	2025-02-06 16:07:31.499292000 +0800
@@ -0,0 +1 @@
+#include <sys/utime.h>
diff -urN global-6.6.14-orig/libltdl/Makefile.in global-6.6.14/libltdl/Makefile.in
--- global-6.6.14-orig/libltdl/Makefile.in	2024-12-11 14:44:42.000000000 +0800
+++ global-6.6.14/libltdl/Makefile.in	2025-02-06 16:07:31.545152000 +0800
@@ -299,7 +299,7 @@
 # -I$(srcdir) is needed for user that built libltdl with a sub-Automake
 # (not as a sub-package!) using 'nostdinc':
 AM_CPPFLAGS = -DLT_CONFIG_H='<$(LT_CONFIG_H)>' -DLTDL -I. -I$(srcdir) \
-	-Ilibltdl -I$(srcdir)/libltdl
+	-Ilibltdl -I$(srcdir)/libltdl -I$(top_srcdir)/libglibc
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
 AUTOCONF = @AUTOCONF@
diff -urN global-6.6.14-orig/libutil/date.c global-6.6.14/libutil/date.c
--- global-6.6.14-orig/libutil/date.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/date.c	2025-02-06 16:07:31.551540000 +0800
@@ -57,10 +57,18 @@
 	FILE *ip;
 
 	strlimcpy(buf, "unknown time", sizeof(buf));
+#ifdef _MSC_VER
+	if ((ip = _popen("date", "r")) != NULL) {
+#else
 	if ((ip = popen("date", "r")) != NULL) {
+#endif
 		if (fgets(buf, sizeof(buf), ip))
 			buf[strlen(buf) - 1] = 0;
+#ifdef _MSC_VER
+		_pclose(ip);
+#else
 		pclose(ip);
+#endif
 	}
 #endif
 	return buf;
diff -urN global-6.6.14-orig/libutil/fileop.c global-6.6.14/libutil/fileop.c
--- global-6.6.14-orig/libutil/fileop.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/fileop.c	2025-02-06 16:07:31.555256400 +0800
@@ -53,6 +53,20 @@
 #define mkdir(path,mode) mkdir(path)
 #endif
 
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 /*
 
 File operation: usage
@@ -113,7 +127,11 @@
 
 	if (compress) {
 		snprintf(command, sizeof(command), "gzip -c >\"%s\"", path);
+#ifdef _MSC_VER
+		fp = _popen(command, "w");
+#else
 		fp = popen(command, "w");
+#endif
 		if (fp == NULL)
 			die("cannot execute '%s'.", command);
 	} else {
@@ -150,7 +168,11 @@
 close_file(FILEOP *fileop)
 {
 	if (fileop->type & FILEOP_COMPRESS) {
+#ifdef _MSC_VER
+		if (_pclose(fileop->fp) != 0)
+#else
 		if (pclose(fileop->fp) != 0)
+#endif
 			die("terminated abnormally. '%s'", fileop->command);
 	} else
 		fclose(fileop->fp);
@@ -251,12 +273,20 @@
 int
 read_first_line(const char *com, STRBUF *sb)
 {
+#ifdef _MSC_VER
+	FILE *ip = _popen(com, "r");
+#else
 	FILE *ip = popen(com, "r");
+#endif
 	char *p;
 
 	if (ip == NULL)
 		return -1;
 	p = strbuf_fgets(sb, ip, STRBUF_NOCRLF);
+#ifdef _MSC_VER
+	_pclose(ip);
+#else
 	pclose(ip);
+#endif
 	return (p == NULL) ? -1 : 0;
 }
diff -urN global-6.6.14-orig/libutil/find.c global-6.6.14/libutil/find.c
--- global-6.6.14-orig/libutil/find.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/find.c	2025-02-06 16:07:31.560455300 +0800
@@ -84,6 +84,36 @@
 #define STRNCMP strncmp
 #define ROOT 0
 #endif
+
+#ifdef WIN32
+// Access flags are normally defined in unistd.h, which unavailable under
+// Windows. Instead, define the flags as documented at
+// https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess
+#ifndef F_OK
+#define F_OK 0
+#endif
+#ifndef W_OK
+#define W_OK 2
+#endif
+#ifndef R_OK
+#define R_OK 4
+#endif
+#endif
+
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 /*
  * usage of find_xxx()
  *
diff -urN global-6.6.14-orig/libutil/getdbpath.c global-6.6.14/libutil/getdbpath.c
--- global-6.6.14-orig/libutil/getdbpath.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/getdbpath.c	2025-02-06 16:07:31.565320300 +0800
@@ -46,6 +46,20 @@
 #include "strlimcpy.h"
 #include "test.h"
 
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 /**
  * define the position of the root slash.
  */
diff -urN global-6.6.14-orig/libutil/gparam.h global-6.6.14/libutil/gparam.h
--- global-6.6.14-orig/libutil/gparam.h	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/gparam.h	2025-02-06 16:07:31.569309500 +0800
@@ -20,7 +20,7 @@
 
 #ifndef _GPARAM_H_
 #define _GPARAM_H_
-#ifndef __BORLANDC__
+#ifdef HAVE_SYS_PARAM_H
 #include <sys/param.h>
 #endif
 
diff -urN global-6.6.14-orig/libutil/Makefile.in global-6.6.14/libutil/Makefile.in
--- global-6.6.14-orig/libutil/Makefile.in	2024-12-11 14:44:42.000000000 +0800
+++ global-6.6.14/libutil/Makefile.in	2025-02-06 16:14:07.608160200 +0800
@@ -257,7 +257,8 @@
 	-DDATADIR='"$(datadir)"' \
 	-DLIBDIR='"$(libdir)"' \
 	-DLOCALSTATEDIR='"$(localstatedir)"' \
-	-DSYSCONFDIR='"$(sysconfdir)"'
+	-DSYSCONFDIR='"$(sysconfdir)"' \
+	-I$(top_srcdir)/libglibc
 
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
diff -urN global-6.6.14-orig/libutil/makepath.c global-6.6.14/libutil/makepath.c
--- global-6.6.14-orig/libutil/makepath.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/makepath.c	2025-02-06 16:07:31.578712700 +0800
@@ -103,7 +103,9 @@
 #include <pwd.h>
 #include <limits.h>
 #include <stdlib.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <errno.h>
 /**
  * makepath_with_tilde: make path from a file with a tilde.
diff -urN global-6.6.14-orig/libutil/path.h global-6.6.14/libutil/path.h
--- global-6.6.14-orig/libutil/path.h	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/path.h	2025-02-06 16:07:31.583055200 +0800
@@ -21,8 +21,10 @@
 #ifndef _PATH_H_
 #define _PATH_H_
 
-#if (defined(_WIN32) && !defined(__CYGWIN__)) || defined(__DJGPP__)
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#else
+#include <io.h>
 #endif
 
 /**
diff -urN global-6.6.14-orig/libutil/test.c global-6.6.14/libutil/test.c
--- global-6.6.14-orig/libutil/test.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/test.c	2025-02-06 16:07:31.586404600 +0800
@@ -43,6 +43,35 @@
 #include "strbuf.h"
 #include "test.h"
 
+#ifdef WIN32
+// Access flags are normally defined in unistd.h, which unavailable under
+// Windows. Instead, define the flags as documented at
+// https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess
+#ifndef F_OK
+#define F_OK 0
+#endif
+#ifndef W_OK
+#define W_OK 2
+#endif
+#ifndef R_OK
+#define R_OK 4
+#endif
+#endif
+
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 /**
  * Decide whether or not the path is binary file.
  *
diff -urN global-6.6.14-orig/libutil/xargs.c global-6.6.14/libutil/xargs.c
--- global-6.6.14-orig/libutil/xargs.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/xargs.c	2025-02-06 16:07:31.590393900 +0800
@@ -256,7 +256,11 @@
 		strbuf_putc(comline, '"');
 #endif
 	if (count > 0) {
+#ifdef _MSC_VER
+		pipe = _popen(strbuf_value(comline), "r");
+#else
 		pipe = popen(strbuf_value(comline), "r");
+#endif
 		if (pipe == NULL)
 			die("cannot execute command '%s'.", strbuf_value(comline));
 	}
@@ -420,7 +424,11 @@
 		return strbuf_value(xp->result);
 	}
 	if (xp->pipe)
+#ifdef _MSC_VER
+		if (_pclose(xp->pipe) != 0 && !xp->ignore_error)
+#else
 		if (pclose(xp->pipe) != 0 && !xp->ignore_error)
+#endif
 			die("command failed in xargs_read().");
 	/*
 	 * Switch to the next segment.
@@ -433,7 +441,11 @@
 			return strbuf_value(xp->result);
 		}
 		if (xp->pipe) {
+#ifdef _MSC_VER
+			if (_pclose(xp->pipe) != 0 && !xp->ignore_error)
+#else
 			if (pclose(xp->pipe) != 0 && !xp->ignore_error)
+#endif
 				die("command failed in xargs_read().");
 		} else {
 			xp->end_of_arg = 1;
