diff -urN OpenBLAS-0.3.28-orig/cmake/arch.cmake OpenBLAS-0.3.28/cmake/arch.cmake
--- OpenBLAS-0.3.28-orig/cmake/arch.cmake	2024-08-09 04:41:46.000000000 +0800
+++ OpenBLAS-0.3.28/cmake/arch.cmake	2025-03-09 14:15:43.655419000 +0800
@@ -18,7 +18,7 @@
         set(CCOMMON_OPT "${CCOMMON_OPT} -DEXPRECISION -m128bit-long-double")
         set(FCOMMON_OPT	"${FCOMMON_OPT} -m128bit-long-double")
       endif ()
-      if (${CMAKE_C_COMPILER_ID} STREQUAL "Clang")
+      if (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "IntelLLVM")
         set(EXPRECISION	1)
         set(CCOMMON_OPT "${CCOMMON_OPT} -DEXPRECISION")
         set(FCOMMON_OPT	"${FCOMMON_OPT} -m128bit-long-double")
diff -urN OpenBLAS-0.3.28-orig/cmake/cc.cmake OpenBLAS-0.3.28/cmake/cc.cmake
--- OpenBLAS-0.3.28-orig/cmake/cc.cmake	2024-08-09 04:41:46.000000000 +0800
+++ OpenBLAS-0.3.28/cmake/cc.cmake	2025-03-09 14:15:43.655419000 +0800
@@ -5,11 +5,15 @@
 include(CheckCCompilerFlag)
 
 if (${CMAKE_C_COMPILER_ID} MATCHES "IntelLLVM")
-  set(CCOMMON_OPT "${CCOMMON_OPT} -fp-model=consistent")
+  if (WIN32)
+    set(CCOMMON_OPT "${CCOMMON_OPT} -fp:consistent")
+  else()
+    set(CCOMMON_OPT "${CCOMMON_OPT} -fp-model=consistent")
+  endif()
   set(GCC_VERSION 100)
 endif ()
 
-if (${CMAKE_C_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_C_COMPILER_ID} STREQUAL "LSB" OR ${CMAKE_C_COMPILER_ID} MATCHES "Clang")
+if (${CMAKE_C_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_C_COMPILER_ID} STREQUAL "LSB" OR ${CMAKE_C_COMPILER_ID} MATCHES "Clang" OR ${CMAKE_C_COMPILER_ID} MATCHES "IntelLLVM")
   set(CCOMMON_OPT "${CCOMMON_OPT} -Wall")
   set(COMMON_PROF "${COMMON_PROF} -fno-inline")
   set(NO_UNINITIALIZED_WARN "-Wno-uninitialized")
diff -urN OpenBLAS-0.3.28-orig/cmake/fc.cmake OpenBLAS-0.3.28/cmake/fc.cmake
--- OpenBLAS-0.3.28-orig/cmake/fc.cmake	2024-08-09 04:41:46.000000000 +0800
+++ OpenBLAS-0.3.28/cmake/fc.cmake	2025-03-09 14:15:43.671016100 +0800
@@ -36,9 +36,9 @@
   endif ()
 endif ()
 
-if (${F_COMPILER} STREQUAL "GFORTRAN" OR ${F_COMPILER} STREQUAL "F95" OR CMAKE_Fortran_COMPILER_ID STREQUAL "LLVMFlang")
+if (${F_COMPILER} STREQUAL "GFORTRAN" OR ${F_COMPILER} STREQUAL "F95" OR CMAKE_Fortran_COMPILER_ID STREQUAL "LLVMFlang" OR CMAKE_Fortran_COMPILER_ID STREQUAL "IntelLLVM")
   set(CCOMMON_OPT "${CCOMMON_OPT} -DF_INTERFACE_GFORT")
-  if (NOT CMAKE_Fortran_COMPILER_ID STREQUAL "LLVMFlang")
+  if (NOT CMAKE_Fortran_COMPILER_ID STREQUAL "LLVMFlang" AND NOT CMAKE_Fortran_COMPILER_ID STREQUAL "IntelLLVM")
     # ensure reentrancy of lapack codes
     set(FCOMMON_OPT "${FCOMMON_OPT} -Wall -frecursive")
     # work around ABI violation in passing string arguments from C
@@ -91,11 +91,11 @@
     endif ()
   else ()
     if (BINARY64)
-      if (NOT CMAKE_Fortran_COMPILER_ID MATCHES "LLVMFlang.*")
+      if (NOT CMAKE_Fortran_COMPILER_ID MATCHES "LLVMFlang.*" AND NOT CMAKE_Fortran_COMPILER_ID MATCHES "IntelLLVM")
       set(FCOMMON_OPT "${FCOMMON_OPT} -m64")
       endif ()
       if (INTERFACE64)
-        if (CMAKE_Fortran_COMPILER_ID STREQUAL "Intel")
+        if (CMAKE_Fortran_COMPILER_ID STREQUAL "Intel" OR CMAKE_Fortran_COMPILER_ID STREQUAL "IntelLLVM")
           if (WIN32)
             set(FCOMMON_OPT "${FCOMMON_OPT} /integer-size:64")
           else ()
@@ -106,7 +106,7 @@
         endif ()
       endif ()
     else ()
-        if (NOT CMAKE_Fortran_COMPILER_ID MATCHES "LLVMFlang.*")
+      if (NOT CMAKE_Fortran_COMPILER_ID MATCHES "LLVMFlang.*" AND NOT CMAKE_Fortran_COMPILER_ID MATCHES "IntelLLVM")
            set(FCOMMON_OPT "${FCOMMON_OPT} -m32")
 	endif ()
     endif ()
@@ -117,14 +117,18 @@
   endif ()
 endif ()
 
-if (${F_COMPILER} STREQUAL "INTEL" OR CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
+if (${F_COMPILER} STREQUAL "IFORT" OR ${F_COMPILER} STREQUAL "IFX" OR CMAKE_Fortran_COMPILER_ID MATCHES "Intel" OR CMAKE_Fortran_COMPILER_ID MATCHES "IntelLLVM")
   set(CCOMMON_OPT "${CCOMMON_OPT} -DF_INTERFACE_INTEL")
   if (INTERFACE64)
     set(FCOMMON_OPT "${FCOMMON_OPT} -i8")
   endif ()
-  set(FCOMMON_OPT "${FCOMMON_OPT} -recursive -fp-model=consistent")
+  if (WIN32)
+    set(FCOMMON_OPT "${FCOMMON_OPT} -recursive -fp:consistent")
+  else()
+    set(FCOMMON_OPT "${FCOMMON_OPT} -recursive -fp-model=consistent")
+  endif()
   if (USE_OPENMP)
-    set(FCOMMON_OPT "${FCOMMON_OPT} -openmp")
+    set(FCOMMON_OPT "${FCOMMON_OPT} -fopenmp")
   endif ()
 endif ()
 
diff -urN OpenBLAS-0.3.28-orig/cmake/os.cmake OpenBLAS-0.3.28/cmake/os.cmake
--- OpenBLAS-0.3.28-orig/cmake/os.cmake	2024-08-09 04:41:46.000000000 +0800
+++ OpenBLAS-0.3.28/cmake/os.cmake	2025-03-09 14:15:43.671016100 +0800
@@ -30,7 +30,7 @@
   set(PSUFFIX "pobj")
   set(LIBSUFFIX "a")
 
-  if (${CMAKE_C_COMPILER_ID} STREQUAL "Clang")
+  if (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "IntelLLVM")
     set(CCOMMON_OPT	"${CCOMMON_OPT} -DMS_ABI")
   endif ()
 
@@ -49,7 +49,7 @@
   # Ensure the correct stack alignment on Win32
   # http://permalink.gmane.org/gmane.comp.lib.openblas.general/97
   if (X86)
-    if (NOT MSVC AND NOT ${CMAKE_C_COMPILER_ID} STREQUAL "Clang")
+    if (NOT MSVC AND NOT ${CMAKE_C_COMPILER_ID} STREQUAL "Clang" AND NOT ${CMAKE_C_COMPILER_ID} STREQUAL "IntelLLVM")
       set(CCOMMON_OPT "${CCOMMON_OPT} -mincoming-stack-boundary=2")
     endif ()
     set(FCOMMON_OPT "${FCOMMON_OPT} -mincoming-stack-boundary=2")
diff -urN OpenBLAS-0.3.28-orig/cmake/prebuild.cmake OpenBLAS-0.3.28/cmake/prebuild.cmake
--- OpenBLAS-0.3.28-orig/cmake/prebuild.cmake	2024-08-09 04:41:46.000000000 +0800
+++ OpenBLAS-0.3.28/cmake/prebuild.cmake	2025-03-09 14:15:43.686667500 +0800
@@ -58,7 +58,7 @@
 
 # c_check
 set(FU "")
-if (APPLE OR (MSVC AND NOT ${CMAKE_C_COMPILER_ID} MATCHES "Clang"))
+if (APPLE OR (MSVC AND NOT (${CMAKE_C_COMPILER_ID} MATCHES "Clang" OR ${CMAKE_C_COMPILER_ID} MATCHES "IntelLLVM")))
   set(FU "_")
 endif()
 if(MINGW AND NOT MINGW64)
diff -urN OpenBLAS-0.3.28-orig/cmake/system.cmake OpenBLAS-0.3.28/cmake/system.cmake
--- OpenBLAS-0.3.28-orig/cmake/system.cmake	2024-08-09 04:41:46.000000000 +0800
+++ OpenBLAS-0.3.28/cmake/system.cmake	2025-03-09 14:15:43.686667500 +0800
@@ -110,7 +110,7 @@
   set(HAVE_GAS 1)
   if (CMAKE_ASM_COMPILER_ID STREQUAL "GNU")
     set(HAVE_GAS 0)
-  elseif (CMAKE_ASM_COMPILER_ID STREQUAL "Clang")
+  elseif (CMAKE_ASM_COMPILER_ID STREQUAL "Clang" OR CMAKE_ASM_COMPILER_ID STREQUAL "IntelLLVM")
     set(CCOMMON_OPT "${CCOMMON_OPT} -fno-integrated-as")
     set(HAVE_GAS 0)
   endif ()
@@ -175,7 +175,7 @@
         else()
           set (KERNEL_DEFINITIONS "${KERNEL_DEFINITIONS} -march=skylake-avx512")
         endif()
-    elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "AppleClang")
+      elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "AppleClang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "IntelLLVM")
          if (${CMAKE_C_COMPILER_VERSION} VERSION_GREATER 8.99)
           set (KERNEL_DEFINITIONS "${KERNEL_DEFINITIONS} -march=cooperlake -mllvm -exhaustive-register-search")
         else()
@@ -190,7 +190,7 @@
         else()
           set (KERNEL_DEFINITIONS "${KERNEL_DEFINITIONS} -march=skylake-avx512")
         endif()
-    elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "AppleClang")
+    elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "AppleClang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "IntelLLVM")
          if (${CMAKE_C_COMPILER_VERSION} VERSION_GREATER 12.0)
           set (KERNEL_DEFINITIONS "${KERNEL_DEFINITIONS} -march=sapphirerapids -mllvm -exhaustive-register-search")
         else()
@@ -200,7 +200,7 @@
   endif()
   if (${TARGET} STREQUAL SKYLAKEX AND NOT NO_AVX512)
     	  set (KERNEL_DEFINITIONS "${KERNEL_DEFINITIONS} -march=skylake-avx512")
-  	  if (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "AppleClang")
+      if (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "AppleClang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "IntelLLVM")
 	 	set (KERNEL_DEFINITIONS "${KERNEL_DEFINITIONS} -mllvm -exhaustive-register-search")
   	  endif()
   endif()
@@ -212,7 +212,7 @@
 	else()
     	  set (KERNEL_DEFINITIONS "${KERNEL_DEFINITIONS} -march=skylake-avx512")
         endif()
-    elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "AppleClang")
+    elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "AppleClang" OR ${CMAKE_C_COMPILER_ID} STREQUAL "IntelLLVM")
          if (${CMAKE_C_COMPILER_VERSION} VERSION_GREATER 15.99)
           set (KERNEL_DEFINITIONS "${KERNEL_DEFINITIONS} -march=znver4")
 	else()
@@ -637,9 +637,9 @@
 endif ()
 
 if (CMAKE_Fortran_COMPILER)
-if ("${F_COMPILER}" STREQUAL "NAG" OR "${F_COMPILER}" STREQUAL "CRAY" OR CMAKE_Fortran_COMPILER_ID MATCHES "LLVMFlang.*")
+  if ("${F_COMPILER}" STREQUAL "NAG" OR "${F_COMPILER}" STREQUAL "CRAY" OR CMAKE_Fortran_COMPILER_ID MATCHES "LLVMFlang.*" OR CMAKE_Fortran_COMPILER_ID MATCHES "IntelLLVM")
   set(FILTER_FLAGS "-msse3;-mssse3;-msse4.1;-mavx;-mavx2,-mskylake-avx512")
-  if (CMAKE_Fortran_COMPILER_ID MATCHES "LLVMFlang.*")
+  if (CMAKE_Fortran_COMPILER_ID MATCHES "LLVMFlang.*" OR CMAKE_Fortran_COMPILER_ID MATCHES "IntelLLVM")
 message(STATUS "removing fortran flags")
     set(FILTER_FLAGS "${FILTER_FLAGS};-m32;-m64")
   endif ()
@@ -670,9 +670,16 @@
 
 if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
 if ("${F_COMPILER}" STREQUAL "FLANG")
-if (${CMAKE_Fortran_COMPILER_VERSION} VERSION_LESS_EQUAL 3)
-  set(CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE} -fno-unroll-loops")
+  if (${CMAKE_Fortran_COMPILER_VERSION} VERSION_LESS_EQUAL 3)
+    set(CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE} -fno-unroll-loops")
+  endif ()
 endif ()
+if ((${F_COMPILER} STREQUAL "IFORT" OR ${F_COMPILER} STREQUAL "IFX"))
+  if (WIN32)
+    set(CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE} -Qunroll:0")
+  else()
+    set(CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE} -unroll=0")
+  endif()
 endif ()
 endif ()
 
diff -urN OpenBLAS-0.3.28-orig/lapack-netlib/CMAKE/FortranMangling.cmake OpenBLAS-0.3.28/lapack-netlib/CMAKE/FortranMangling.cmake
--- OpenBLAS-0.3.28-orig/lapack-netlib/CMAKE/FortranMangling.cmake	2024-08-09 04:41:46.000000000 +0800
+++ OpenBLAS-0.3.28/lapack-netlib/CMAKE/FortranMangling.cmake	2025-03-09 14:15:43.717907900 +0800
@@ -15,7 +15,7 @@
   get_filename_component(F77_PATH ${CMAKE_Fortran_COMPILER} PATH)
   set(F77 ${F77_NAME} CACHE INTERNAL "Name of the fortran compiler.")
 
-  if(${F77} STREQUAL "ifort.exe")
+  if(${F77} STREQUAL "ifort.exe" OR ${F77} STREQUAL "ifx.exe")
     #settings for Intel Fortran
     set(F77_OPTION_COMPILE "/c" CACHE INTERNAL
       "Fortran compiler option for compiling without linking.")
diff -urN OpenBLAS-0.3.28-orig/lapack-netlib/LAPACKE/include/lapacke_config.h OpenBLAS-0.3.28/lapack-netlib/LAPACKE/include/lapacke_config.h
--- OpenBLAS-0.3.28-orig/lapack-netlib/LAPACKE/include/lapacke_config.h	2024-08-09 04:41:46.000000000 +0800
+++ OpenBLAS-0.3.28/lapack-netlib/LAPACKE/include/lapacke_config.h	2025-03-09 14:15:43.717907900 +0800
@@ -68,7 +68,7 @@
 #endif
 
 #ifndef LAPACK_COMPLEX_CUSTOM
-#if defined(_MSC_VER)
+#if defined(_MSC_VER) && !defined(__INTEL_CLANG_COMPILER)
     #define _CRT_USE_C_COMPLEX_H
     #include <complex.h>
     #define LAPACK_COMPLEX_CUSTOM
