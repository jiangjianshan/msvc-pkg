diff -urN global-6.6.14-orig/global/global.c global-6.6.14/global/global.c
--- global-6.6.14-orig/global/global.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/global/global.c	2025-02-06 16:07:31.354996200 +0800
@@ -1146,7 +1146,11 @@
 	}
 	if (debug)
 		fprintf(stderr, "completion_idutils: %s\n", strbuf_value(sb));
+#ifdef _MSC_VER
+	if (!(ip = _popen(strbuf_value(sb), "r")))
+#else
 	if (!(ip = popen(strbuf_value(sb), "r")))
+#endif
 		die("cannot execute '%s'.", strbuf_value(sb));
 #else
 	/*
@@ -1191,7 +1195,11 @@
 		count++;
 	}
 #if (defined(_WIN32) && !defined(__CYGWIN__)) || defined(__DJGPP__)
+#ifdef _MSC_VER
+	if (_pclose(ip) != 0)
+#else
 	if (pclose(ip) != 0)
+#endif
 		die("terminated abnormally (errno = %d).", errno);
 #else
 	if (secure_pclose(ip) != 0)
@@ -1373,7 +1381,11 @@
 	strbuf_puts(ib, quote_shell(pattern));
 	if (debug)
 		fprintf(stderr, "idutils: %s\n", strbuf_value(ib));
+#ifdef _MSC_VER
+	if (!(ip = _popen(strbuf_value(ib), "r")))
+#else
 	if (!(ip = popen(strbuf_value(ib), "r")))
+#endif
 		die("cannot execute '%s'.", strbuf_value(ib));
 #else
 	/*
@@ -1454,7 +1466,11 @@
 		}
 	}
 #if (defined(_WIN32) && !defined(__CYGWIN__)) || defined(__DJGPP__)
+#ifdef _MSC_VER
+	if (_pclose(ip) != 0)
+#else
 	if (pclose(ip) != 0)
+#endif
 		die("terminated abnormally (errno = %d).", errno);
 #else
 	if (secure_pclose(ip) != 0)
diff -urN global-6.6.14-orig/global/literal.c global-6.6.14/global/literal.c
--- global-6.6.14-orig/global/literal.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/global/literal.c	2025-02-06 16:07:31.361332900 +0800
@@ -29,7 +29,9 @@
 #endif
 #include <stdio.h>
 #include <ctype.h>
+#ifdef HAVE_SYS_PARAM_H
 #include <sys/param.h>
+#endif
 #include <sys/stat.h>
 #include <errno.h>
 #ifdef STDC_HEADERS
diff -urN global-6.6.14-orig/gtags/gtags.c global-6.6.14/gtags/gtags.c
--- global-6.6.14-orig/gtags/gtags.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags/gtags.c	2025-02-06 16:07:31.365818500 +0800
@@ -619,7 +619,11 @@
 		}
 		if (debug)
 			fprintf(stderr, "executing mkid like: %s\n", strbuf_value(sb));
+#ifdef _MSC_VER
+		op = _popen(strbuf_value(sb), "w");
+#else
 		op = popen(strbuf_value(sb), "w");
+#endif
 		if (op == NULL)
 			die("cannot execute '%s'.", strbuf_value(sb));
 		gp = gfind_open(dbpath, NULL, GPATH_BOTH, 0);
@@ -628,7 +632,11 @@
 			fputc('\0', op);
 		}
 		gfind_close(gp);
+#ifdef _MSC_VER
+		if (_pclose(op) != 0)
+#else
 		if (pclose(op) != 0)
+#endif
 			die("terminated abnormally '%s' (errno = %d).", strbuf_value(sb), errno);
 		if (test("f", makepath(dbpath, "ID", NULL)))
 			if (chmod(makepath(dbpath, "ID", NULL), 0644) < 0)
diff -urN global-6.6.14-orig/gtags-cscope/exec.c global-6.6.14/gtags-cscope/exec.c
--- global-6.6.14-orig/gtags-cscope/exec.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/exec.c	2025-02-06 16:07:31.371490900 +0800
@@ -36,11 +36,13 @@
  *	cscope - interactive C symbol cross-reference
  */
 
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include "global-cscope.h"
 #include <stdarg.h>
 #include <sys/types.h>      /* pid_t */
-#ifdef __DJGPP__
+#if defined(__DJGPP__) || defined(_MSC_VER)
 #include <process.h>
 #endif
 #if defined(USE_NCURSES) && !defined(RENAMED_NCURSES)
diff -urN global-6.6.14-orig/gtags-cscope/global-cscope.h global-6.6.14/gtags-cscope/global-cscope.h
--- global-6.6.14-orig/gtags-cscope/global-cscope.h	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/global-cscope.h	2025-02-06 16:07:31.376183500 +0800
@@ -42,7 +42,9 @@
 #define CSCOPE_GLOBAL_H
 
 #include "config.h"
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <sys/types.h>
 #include <ctype.h>	/* isalpha, isdigit, etc. */
 #include <signal.h>	/* SIGINT and SIGQUIT */
@@ -158,6 +160,21 @@
 # endif
 #endif
 
+#ifdef WIN32
+// Access flags are normally defined in unistd.h, which unavailable under
+// Windows. Instead, define the flags as documented at
+// https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess
+#ifndef F_OK
+#define F_OK 0
+#endif
+#ifndef W_OK
+#define W_OK 2
+#endif
+#ifndef R_OK
+#define R_OK 4
+#endif
+#endif
+
 /* access(2) parameters. Only make assumptions about their values if
  * <unistd.h> fails to define them. */
 #ifdef R_OK
diff -urN global-6.6.14-orig/gtags-cscope/gtags-cscope.c global-6.6.14/gtags-cscope/gtags-cscope.c
--- global-6.6.14-orig/gtags-cscope/gtags-cscope.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/gtags-cscope.c	2025-02-06 16:07:31.380551900 +0800
@@ -53,7 +53,9 @@
 #include "const.h"
 
 #include <stdlib.h>	/* atoi */
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #if defined(USE_NCURSES) && !defined(RENAMED_NCURSES)
 #include <ncurses.h>
 #else
diff -urN global-6.6.14-orig/gtags-cscope/logdir.c global-6.6.14/gtags-cscope/logdir.c
--- global-6.6.14-orig/gtags-cscope/logdir.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/logdir.c	2025-02-06 16:07:31.386419800 +0800
@@ -39,7 +39,9 @@
  *	storage allocation.
  */
 
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <string.h>
 #include "global-cscope.h"
 
diff -urN global-6.6.14-orig/gtags-cscope/mypopen.c global-6.6.14/gtags-cscope/mypopen.c
--- global-6.6.14-orig/gtags-cscope/mypopen.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/gtags-cscope/mypopen.c	2025-02-06 16:07:31.390410800 +0800
@@ -32,7 +32,9 @@
 
 #include <stdio.h>
 #include <signal.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <fcntl.h>
 #include <sys/types.h>
 #include "global-cscope.h"	/* pid_t, RETSIGTYPE, shell, and mybasename() */
@@ -137,7 +139,11 @@
 #ifdef MS_OS
 	/* HBB 20010312: Has its own implementation of popen(), which
 	 * is better suited to the platform than cscope's */
+#ifdef _MSC_VER
+	return (_popen)(cmd, mode);
+#else
 	return (popen)(cmd, mode);
+#endif
 #else
 	int	p[2];
 	pid_t *poptr;
@@ -191,7 +197,11 @@
 #ifdef MS_OS
 	/* HBB 20010705: This system has its own pclose(), which we
 	 * don't want to replace */
+#ifdef _MSC_VER
+	return (_pclose)(ptr);
+#else
 	return (pclose)(ptr);
+#endif
 #else
 	f = fileno(ptr);
 	(void) fclose(ptr);
diff -urN global-6.6.14-orig/htags/defineindex.c global-6.6.14/htags/defineindex.c
--- global-6.6.14-orig/htags/defineindex.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags/defineindex.c	2025-02-06 16:07:31.394660300 +0800
@@ -100,7 +100,11 @@
 	 */
 	STDOUT = DEFINES;
 	snprintf(command, sizeof(command), PQUOTE "%s -c" PQUOTE, quote_shell(global_path));
+#ifdef _MSC_VER
+	if ((TAGS = _popen(command, "r")) == NULL)
+#else
 	if ((TAGS = popen(command, "r")) == NULL)
+#endif
 		die("cannot execute '%s'.", command);
 	alpha[0] = '\0';
 	while ((_ = strbuf_fgets(sb, TAGS, STRBUF_NOCRLF)) != NULL) {
@@ -244,7 +248,11 @@
 		if (map_file)
 			fprintf(MAP, "%s\t%s\n", tag, url_for_map);
 	}
+#ifdef _MSC_VER
+	if (_pclose(TAGS) != 0)
+#else
 	if (pclose(TAGS) != 0)
+#endif
 		die("terminated abnormally '%s' (errno = %d).", command, errno);
 	if (aflag && alpha[0]) {
 		char tmp[128];
diff -urN global-6.6.14-orig/htags/dupindex.c global-6.6.14/htags/dupindex.c
--- global-6.6.14-orig/htags/dupindex.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags/dupindex.c	2025-02-06 16:07:31.399807800 +0800
@@ -95,7 +95,11 @@
 #if defined(_WIN32) && !defined(__CYGWIN__)
 		strbuf_putc(command, '"');
 #endif
+#ifdef _MSC_VER
+		if ((ip = _popen(strbuf_value(command), "r")) == NULL)
+#else
 		if ((ip = popen(strbuf_value(command), "r")) == NULL)
+#endif
 			die("cannot execute '%s'.", strbuf_value(command));
 		while ((ctags_xid = strbuf_fgets(sb, ip, STRBUF_NOCRLF)) != NULL) {
 			char fid[MAXFIDLEN];
@@ -175,7 +179,11 @@
 		}
 		if (db == GTAGS)
 			definition_count = count;
+#ifdef _MSC_VER
+		if (_pclose(ip) != 0)
+#else
 		if (pclose(ip) != 0)
+#endif
 			die("terminated abnormally '%s' (errno = %d).", strbuf_value(command), errno);
 		if (writing) {
 			if (!dynamic) {
diff -urN global-6.6.14-orig/htags/fileindex.c global-6.6.14/htags/fileindex.c
--- global-6.6.14-orig/htags/fileindex.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags/fileindex.c	2025-02-06 16:07:31.404206800 +0800
@@ -809,7 +809,11 @@
 	 * Therefore, we can not use "\\t" here.
 	 */
 	snprintf(command, sizeof(command), PQUOTE "%s -gnx --encode-path=\" \t\" \"^[ \t]*(#[ \t]*(import|include)|include[ \t]*\\()\"" PQUOTE, quote_shell(global_path));
+#ifdef _MSC_VER
+	if ((PIPE = _popen(command, "r")) == NULL)
+#else
 	if ((PIPE = popen(command, "r")) == NULL)
+#endif
 		die("cannot execute '%s'.", command);
 	strbuf_reset(input);
 	while ((ctags_x = strbuf_fgets(input, PIPE, STRBUF_NOCRLF)) != NULL) {
@@ -847,7 +851,11 @@
 		}
 		put_included(inc, buf);
 	}
+#ifdef _MSC_VER
+	if (_pclose(PIPE) != 0)
+#else
 	if (pclose(PIPE) != 0)
+#endif
 		die("terminated abnormally '%s' (errno = %d).", command, errno);
 
 	for (inc = first_inc(); inc; inc = next_inc()) {
diff -urN global-6.6.14-orig/htags/htags.c global-6.6.14/htags/htags.c
--- global-6.6.14-orig/htags/htags.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags/htags.c	2025-02-06 16:07:31.409262400 +0800
@@ -38,7 +38,9 @@
 #include <signal.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#ifdef HAVE_SYS_PARAM_H
 #include <sys/param.h>
+#endif
 #include <errno.h>
 
 #include "getopt.h"
@@ -861,7 +863,11 @@
 			strbuf_sprintf(sb, "%sMAINS%s\n", header_begin, header_end);
 
 			snprintf(buf, sizeof(buf), PQUOTE "%s --result=ctags-xid --encode-path=\" \t\" --nofilter=path %s" PQUOTE, quote_shell(global_path), main_func);
+#ifdef _MSC_VER
+			ip = _popen(buf, "r");
+#else
 			ip = popen(buf, "r");
+#endif
 			if (!ip)
 				die("cannot execute '%s'.", buf);
 			strbuf_puts_nl(sb, gen_list_begin());
@@ -872,7 +878,11 @@
 				strbuf_puts_nl(sb, gen_list_body(SRCS, ctags_x, fid));
 			}
 			strbuf_puts_nl(sb, gen_list_end());
+#ifdef _MSC_VER
+			if (_pclose(ip) != 0)
+#else
 			if (pclose(ip) != 0)
+#endif
 				die("terminated abnormally '%s' (errno = %d).", buf, errno);
 			strbuf_puts_nl(sb, hr);
 			break;
@@ -1015,7 +1025,11 @@
 	 * save config values.
 	 */
 	snprintf(command, sizeof(command), PQUOTE "%s --config" PQUOTE, quote_shell(gtags_path));
+#ifdef _MSC_VER
+	if ((ip = _popen(command, "r")) == NULL)
+#else
 	if ((ip = popen(command, "r")) == NULL)
+#endif
 		die("cannot execute '%s'.", command);
 	while (strbuf_fgets(sb, ip, STRBUF_NOCRLF) != NULL) {
 		for (p = strbuf_value(sb); *p; p++) {
@@ -1029,7 +1043,11 @@
 				strbuf_putc(save_c, *p);
 		}
 	}
+#ifdef _MSC_VER
+	if (_pclose(ip) != 0)
+#else
 	if (pclose(ip) != 0)
+#endif
 		die("terminated abnormally '%s' (errno = %d).", command, errno);
 	strbuf_close(sb);
 	save_config = strbuf_value(save_c);
diff -urN global-6.6.14-orig/htags-refkit/htags_path2url.c global-6.6.14/htags-refkit/htags_path2url.c
--- global-6.6.14-orig/htags-refkit/htags_path2url.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/htags-refkit/htags_path2url.c	2025-02-06 16:07:31.414762400 +0800
@@ -10,7 +10,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#ifdef HAVE_SYS_PARAM_H
 #include <sys/param.h>
+#endif
 #include <sys/stat.h>
 
 #if defined(_WIN32) || defined(__DJGPP__)
diff -urN global-6.6.14-orig/libdb/sqlite3.c global-6.6.14/libdb/sqlite3.c
--- global-6.6.14-orig/libdb/sqlite3.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libdb/sqlite3.c	2025-02-06 16:07:31.442125400 +0800
@@ -17,6 +17,35 @@
 ** language. The code for the "sqlite3" command-line shell is also in a
 ** separate file. This file contains only code for the core SQLite library.
 */
+#ifdef WIN32
+// Access flags are normally defined in unistd.h, which unavailable under
+// Windows. Instead, define the flags as documented at
+// https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess
+#ifndef F_OK
+#define F_OK 0
+#endif
+#ifndef W_OK
+#define W_OK 2
+#endif
+#ifndef R_OK
+#define R_OK 4
+#endif
+#endif
+
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 #define SQLITE_CORE 1
 #define SQLITE_AMALGAMATION 1
 #ifndef SQLITE_PRIVATE
@@ -24682,7 +24711,9 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 /* #include <time.h> */
 #include <sys/time.h>
 #include <errno.h>
@@ -24697,7 +24728,9 @@
 #  include <limits.h>
 # else
 #  include <sys/file.h>
+#ifdef HAVE_SYS_PARAM_H
 #  include <sys/param.h>
+#endif
 # endif
 #endif /* SQLITE_ENABLE_LOCKING_STYLE */
 
@@ -24705,9 +24738,7 @@
 # include <sys/mount.h>
 #endif
 
-#ifdef HAVE_UTIME
 # include <utime.h>
-#endif
 
 /*
 ** Allowed values of unixFile.fsFlags
@@ -26925,12 +26956,8 @@
   if( pFile->eFileLock > NO_LOCK ){
     pFile->eFileLock = eFileLock;
     /* Always update the timestamp on the old file */
-#ifdef HAVE_UTIME
     utime(zLockFile, NULL);
-#else
-    utimes(zLockFile, NULL);
-#endif
-    return SQLITE_OK;
+   return SQLITE_OK;
   }
   
   /* grab an exclusive lock */
diff -urN global-6.6.14-orig/libglibc/getopt.c global-6.6.14/libglibc/getopt.c
--- global-6.6.14-orig/libglibc/getopt.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libglibc/getopt.c	2025-02-06 16:07:31.472766700 +0800
@@ -57,7 +57,9 @@
 /* Don't include stdlib.h for non-GNU C libraries because some of them
    contain conflicting prototypes for getopt.  */
 # include <stdlib.h>
+#ifdef HAVE_UNISTD_H
 # include <unistd.h>
+#endif
 #endif	/* GNU C library.  */
 
 #include <string.h>
diff -urN global-6.6.14-orig/libglibc/regex.c global-6.6.14/libglibc/regex.c
--- global-6.6.14-orig/libglibc/regex.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libglibc/regex.c	2025-02-06 16:07:31.489125100 +0800
@@ -297,11 +297,14 @@
 /* Make alloca work the best possible way.  */
 #  ifdef __GNUC__
 #   define alloca __builtin_alloca
-#  else /* not __GNUC__ */
+#  elif defined _MSC_VER
+#   include <malloc.h>
+#   define alloca _alloca
+#  else /* not __GNUC__ and _MSC_VER */
 #   if HAVE_ALLOCA_H
 #    include <alloca.h>
 #   endif /* HAVE_ALLOCA_H */
-#  endif /* not __GNUC__ */
+#  endif /* not __GNUC__ and _MSC_VER */
 
 # endif /* not alloca */
 
diff -urN global-6.6.14-orig/libglibc/utime.h global-6.6.14/libglibc/utime.h
--- global-6.6.14-orig/libglibc/utime.h	1970-01-01 08:00:00.000000000 +0800
+++ global-6.6.14/libglibc/utime.h	2025-02-06 16:07:31.499292000 +0800
@@ -0,0 +1 @@
+#include <sys/utime.h>
diff -urN global-6.6.14-orig/libltdl/Makefile.in global-6.6.14/libltdl/Makefile.in
--- global-6.6.14-orig/libltdl/Makefile.in	2024-12-11 14:44:42.000000000 +0800
+++ global-6.6.14/libltdl/Makefile.in	2025-02-06 16:07:31.545152000 +0800
@@ -299,7 +299,7 @@
 # -I$(srcdir) is needed for user that built libltdl with a sub-Automake
 # (not as a sub-package!) using 'nostdinc':
 AM_CPPFLAGS = -DLT_CONFIG_H='<$(LT_CONFIG_H)>' -DLTDL -I. -I$(srcdir) \
-	-Ilibltdl -I$(srcdir)/libltdl
+	-Ilibltdl -I$(srcdir)/libltdl -I$(top_srcdir)/libglibc
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
 AUTOCONF = @AUTOCONF@
diff -urN global-6.6.14-orig/libutil/date.c global-6.6.14/libutil/date.c
--- global-6.6.14-orig/libutil/date.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/date.c	2025-02-06 16:07:31.551540000 +0800
@@ -57,10 +57,18 @@
 	FILE *ip;
 
 	strlimcpy(buf, "unknown time", sizeof(buf));
+#ifdef _MSC_VER
+	if ((ip = _popen("date", "r")) != NULL) {
+#else
 	if ((ip = popen("date", "r")) != NULL) {
+#endif
 		if (fgets(buf, sizeof(buf), ip))
 			buf[strlen(buf) - 1] = 0;
+#ifdef _MSC_VER
+		_pclose(ip);
+#else
 		pclose(ip);
+#endif
 	}
 #endif
 	return buf;
diff -urN global-6.6.14-orig/libutil/fileop.c global-6.6.14/libutil/fileop.c
--- global-6.6.14-orig/libutil/fileop.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/fileop.c	2025-02-06 16:07:31.555256400 +0800
@@ -53,6 +53,20 @@
 #define mkdir(path,mode) mkdir(path)
 #endif
 
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 /*
 
 File operation: usage
@@ -113,7 +127,11 @@
 
 	if (compress) {
 		snprintf(command, sizeof(command), "gzip -c >\"%s\"", path);
+#ifdef _MSC_VER
+		fp = _popen(command, "w");
+#else
 		fp = popen(command, "w");
+#endif
 		if (fp == NULL)
 			die("cannot execute '%s'.", command);
 	} else {
@@ -150,7 +168,11 @@
 close_file(FILEOP *fileop)
 {
 	if (fileop->type & FILEOP_COMPRESS) {
+#ifdef _MSC_VER
+		if (_pclose(fileop->fp) != 0)
+#else
 		if (pclose(fileop->fp) != 0)
+#endif
 			die("terminated abnormally. '%s'", fileop->command);
 	} else
 		fclose(fileop->fp);
@@ -251,12 +273,20 @@
 int
 read_first_line(const char *com, STRBUF *sb)
 {
+#ifdef _MSC_VER
+	FILE *ip = _popen(com, "r");
+#else
 	FILE *ip = popen(com, "r");
+#endif
 	char *p;
 
 	if (ip == NULL)
 		return -1;
 	p = strbuf_fgets(sb, ip, STRBUF_NOCRLF);
+#ifdef _MSC_VER
+	_pclose(ip);
+#else
 	pclose(ip);
+#endif
 	return (p == NULL) ? -1 : 0;
 }
diff -urN global-6.6.14-orig/libutil/find.c global-6.6.14/libutil/find.c
--- global-6.6.14-orig/libutil/find.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/find.c	2025-02-06 16:07:31.560455300 +0800
@@ -84,6 +84,36 @@
 #define STRNCMP strncmp
 #define ROOT 0
 #endif
+
+#ifdef WIN32
+// Access flags are normally defined in unistd.h, which unavailable under
+// Windows. Instead, define the flags as documented at
+// https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess
+#ifndef F_OK
+#define F_OK 0
+#endif
+#ifndef W_OK
+#define W_OK 2
+#endif
+#ifndef R_OK
+#define R_OK 4
+#endif
+#endif
+
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 /*
  * usage of find_xxx()
  *
diff -urN global-6.6.14-orig/libutil/getdbpath.c global-6.6.14/libutil/getdbpath.c
--- global-6.6.14-orig/libutil/getdbpath.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/getdbpath.c	2025-02-06 16:07:31.565320300 +0800
@@ -46,6 +46,20 @@
 #include "strlimcpy.h"
 #include "test.h"
 
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 /**
  * define the position of the root slash.
  */
diff -urN global-6.6.14-orig/libutil/gparam.h global-6.6.14/libutil/gparam.h
--- global-6.6.14-orig/libutil/gparam.h	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/gparam.h	2025-02-06 16:07:31.569309500 +0800
@@ -20,7 +20,7 @@
 
 #ifndef _GPARAM_H_
 #define _GPARAM_H_
-#ifndef __BORLANDC__
+#ifdef HAVE_SYS_PARAM_H
 #include <sys/param.h>
 #endif
 
diff -urN global-6.6.14-orig/libutil/Makefile.in global-6.6.14/libutil/Makefile.in
--- global-6.6.14-orig/libutil/Makefile.in	2024-12-11 14:44:42.000000000 +0800
+++ global-6.6.14/libutil/Makefile.in	2025-02-06 16:14:07.608160200 +0800
@@ -257,7 +257,8 @@
 	-DDATADIR='"$(datadir)"' \
 	-DLIBDIR='"$(libdir)"' \
 	-DLOCALSTATEDIR='"$(localstatedir)"' \
-	-DSYSCONFDIR='"$(sysconfdir)"'
+	-DSYSCONFDIR='"$(sysconfdir)"' \
+	-I$(top_srcdir)/libglibc
 
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
diff -urN global-6.6.14-orig/libutil/makepath.c global-6.6.14/libutil/makepath.c
--- global-6.6.14-orig/libutil/makepath.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/makepath.c	2025-02-06 16:07:31.578712700 +0800
@@ -103,7 +103,9 @@
 #include <pwd.h>
 #include <limits.h>
 #include <stdlib.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <errno.h>
 /**
  * makepath_with_tilde: make path from a file with a tilde.
diff -urN global-6.6.14-orig/libutil/path.h global-6.6.14/libutil/path.h
--- global-6.6.14-orig/libutil/path.h	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/path.h	2025-02-06 16:07:31.583055200 +0800
@@ -21,8 +21,10 @@
 #ifndef _PATH_H_
 #define _PATH_H_
 
-#if (defined(_WIN32) && !defined(__CYGWIN__)) || defined(__DJGPP__)
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#else
+#include <io.h>
 #endif
 
 /**
diff -urN global-6.6.14-orig/libutil/test.c global-6.6.14/libutil/test.c
--- global-6.6.14-orig/libutil/test.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/test.c	2025-02-06 16:07:31.586404600 +0800
@@ -43,6 +43,35 @@
 #include "strbuf.h"
 #include "test.h"
 
+#ifdef WIN32
+// Access flags are normally defined in unistd.h, which unavailable under
+// Windows. Instead, define the flags as documented at
+// https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/access-waccess
+#ifndef F_OK
+#define F_OK 0
+#endif
+#ifndef W_OK
+#define W_OK 2
+#endif
+#ifndef R_OK
+#define R_OK 4
+#endif
+#endif
+
+/* POSIX 1003.1 file type tests. */
+#ifndef S_ISDIR
+		/** directory */
+#define	S_ISDIR(m)	((m & 0170000) == 0040000)
+		/** char special */
+#define	S_ISCHR(m)	((m & 0170000) == 0020000)
+		/** block special */
+#define	S_ISBLK(m)	((m & 0170000) == 0060000)
+		/** regular file */
+#define	S_ISREG(m)	((m & 0170000) == 0100000)
+		/** fifo */
+#define	S_ISFIFO(m)	((m & 0170000) == 0010000)
+#endif
+
 /**
  * Decide whether or not the path is binary file.
  *
diff -urN global-6.6.14-orig/libutil/xargs.c global-6.6.14/libutil/xargs.c
--- global-6.6.14-orig/libutil/xargs.c	2024-12-11 14:44:34.000000000 +0800
+++ global-6.6.14/libutil/xargs.c	2025-02-06 16:07:31.590393900 +0800
@@ -256,7 +256,11 @@
 		strbuf_putc(comline, '"');
 #endif
 	if (count > 0) {
+#ifdef _MSC_VER
+		pipe = _popen(strbuf_value(comline), "r");
+#else
 		pipe = popen(strbuf_value(comline), "r");
+#endif
 		if (pipe == NULL)
 			die("cannot execute command '%s'.", strbuf_value(comline));
 	}
@@ -420,7 +424,11 @@
 		return strbuf_value(xp->result);
 	}
 	if (xp->pipe)
+#ifdef _MSC_VER
+		if (_pclose(xp->pipe) != 0 && !xp->ignore_error)
+#else
 		if (pclose(xp->pipe) != 0 && !xp->ignore_error)
+#endif
 			die("command failed in xargs_read().");
 	/*
 	 * Switch to the next segment.
@@ -433,7 +441,11 @@
 			return strbuf_value(xp->result);
 		}
 		if (xp->pipe) {
+#ifdef _MSC_VER
+			if (_pclose(xp->pipe) != 0 && !xp->ignore_error)
+#else
 			if (pclose(xp->pipe) != 0 && !xp->ignore_error)
+#endif
 				die("command failed in xargs_read().");
 		} else {
 			xp->end_of_arg = 1;
